/*
* generated by Xtext
*/
package com.concur.babel.validation;

import org.eclipse.xtext.validation.Check;

import com.concur.babel.babelIdl.BabelIdl;
import com.concur.babel.babelIdl.BabelIdlPackage;
import com.concur.babel.babelIdl.Const;
import com.concur.babel.babelIdl.ConstProperty;
import com.concur.babel.babelIdl.ConstPropertyId;
import com.concur.babel.babelIdl.Enum;
import com.concur.babel.babelIdl.EnumOrdinal;
import com.concur.babel.babelIdl.EnumProperty;
import com.concur.babel.babelIdl.EnumPropertyId;
import com.concur.babel.babelIdl.ImportStatement;
import com.concur.babel.babelIdl.Property;
import com.concur.babel.babelIdl.PropertyValue;
import com.concur.babel.babelIdl.Struct;

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
public class BabelIdlJavaValidator extends com.concur.babel.validation.AbstractBabelIdlJavaValidator {

	public static final String ENUM_PROP_UNIQUE = "ENUM_PROP_UNIQUE";
	
	@Check
	public void checkEnumPropertyIdIsUnique(EnumPropertyId id) {
		
		Enum enumCont = (Enum)id.eContainer().eContainer();
		for (EnumProperty p : enumCont.getProperties()) {
			if (p.getName().getName().equals(id.getName()) && p.getName() != id) {
				error("Enum Names Must Be Unique!", null, BabelIdlPackage.ENUM_PROPERTY__NAME, ENUM_PROP_UNIQUE);
			}
		}		
		
	}
	
	@Check
	public void checkEnumPropertyOrdinalIsUnique(EnumOrdinal ord) {
	
		Enum enumCont = (Enum)ord.eContainer().eContainer();		
		for (EnumProperty p : enumCont.getProperties()) {
			
			if (p.getType().getType() == ord.getType() && p.getType() != ord) {
				error("Enum Ordinal Values Must Be Unique!", null, BabelIdlPackage.ENUM_ORDINAL__TYPE);
			}
			
		}
		
	}	
	
	@Check
	public void checkConsNameIsUnique(ConstPropertyId id) {
		
		Const constCont = (Const)id.eContainer().eContainer();
		for (ConstProperty p : constCont.getProperties()) {
			if (p.getName().getName().equals(id.getName()) && p.getName() != id) {
				error("Constant Name Must Be Unique!", null, BabelIdlPackage.CONST_PROPERTY__NAME);
			}
		}
		
	}
	
	@Check
	public void checkStructNamesAreUnique(PropertyValue val) {
		
		if (val.eContainer().eContainer() instanceof Struct) {

			Struct structCont = (Struct)val.eContainer().eContainer();
			for (Property p : structCont.getProperties()) {
				if (p.getName().getName().equals(val.getName()) && p.getName() != val) {
					error("Struct Names Must Be Unique!", null, BabelIdlPackage.PROPERTY_VALUE__NAME);
				}
			}
			
		}
		
	}
	
	@Check
	public void checkImport(final ImportStatement impStatement) {
		
		BabelIdl idl = (BabelIdl)impStatement.eContainer();
//		idl.get
//		System.err.println("===== Start");
//		System.err.println(impStatement.eContainer().eResource().getURI());
////		System.err.println(ResourcesPlugin.getWorkspace().getRoot());
//		System.err.println("===== End");
		
	}
	
//	@Check
//	public void checkImport(final ImportStatement importStatement) {
//		
//		System.err.println("====== Start");
//		System.err.println(importStatement.getFile());
//		System.err.println("====== End");
//		if (importStatement.getFile() != null && importStatement.getFile().endsWith("\"")) {
//			System.err.println(importStatement.getFile());
//		}
//		
//	}
	
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital", MyDslPackage.Literals.GREETING__NAME);
//		}
//	}
}
