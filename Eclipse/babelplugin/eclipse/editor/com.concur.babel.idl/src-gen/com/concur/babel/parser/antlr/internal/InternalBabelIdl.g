/*
* generated by Xtext
*/
grammar InternalBabelIdl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.concur.babel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.concur.babel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.concur.babel.services.BabelIdlGrammarAccess;

}

@parser::members {

 	private BabelIdlGrammarAccess grammarAccess;
 	
    public InternalBabelIdlParser(TokenStream input, BabelIdlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BabelIdl";	
   	}
   	
   	@Override
   	protected BabelIdlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBabelIdl
entryRuleBabelIdl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBabelIdlRule()); }
	 iv_ruleBabelIdl=ruleBabelIdl 
	 { $current=$iv_ruleBabelIdl.current; } 
	 EOF 
;

// Rule BabelIdl
ruleBabelIdl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBabelIdlAccess().getCommentCommentTypeParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleCommentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBabelIdlRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"CommentType");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBabelIdlAccess().getImportsImportStatementParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImportStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBabelIdlRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"ImportStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBabelIdlAccess().getDefaultNamespaceDefaultNameSpaceParserRuleCall_2_0()); 
	    }
		lv_defaultNamespace_2_0=ruleDefaultNameSpace		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBabelIdlRule());
	        }
       		set(
       			$current, 
       			"defaultNamespace",
        		lv_defaultNamespace_2_0, 
        		"DefaultNameSpace");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBabelIdlAccess().getNamespacesNamespaceParserRuleCall_3_0()); 
	    }
		lv_namespaces_3_0=ruleNamespace		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBabelIdlRule());
	        }
       		add(
       			$current, 
       			"namespaces",
        		lv_namespaces_3_0, 
        		"Namespace");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBabelIdlAccess().getDefinitionsBabelDefinitionParserRuleCall_4_0()); 
	    }
		lv_definitions_4_0=ruleBabelDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBabelIdlRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_4_0, 
        		"BabelDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleBabelDefinition
entryRuleBabelDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBabelDefinitionRule()); }
	 iv_ruleBabelDefinition=ruleBabelDefinition 
	 { $current=$iv_ruleBabelDefinition.current; } 
	 EOF 
;

// Rule BabelDefinition
ruleBabelDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBabelDefinitionAccess().getEnumParserRuleCall_0()); 
    }
    this_Enum_0=ruleEnum
    { 
        $current = $this_Enum_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBabelDefinitionAccess().getStructParserRuleCall_1()); 
    }
    this_Struct_1=ruleStruct
    { 
        $current = $this_Struct_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBabelDefinitionAccess().getConstParserRuleCall_2()); 
    }
    this_Const_2=ruleConst
    { 
        $current = $this_Const_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBabelDefinitionAccess().getServiceParserRuleCall_3()); 
    }
    this_Service_3=ruleService
    { 
        $current = $this_Service_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLineTerm
entryRuleLineTerm returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLineTermRule()); } 
	 iv_ruleLineTerm=ruleLineTerm 
	 { $current=$iv_ruleLineTerm.current.getText(); }  
	 EOF 
;

// Rule LineTerm
ruleLineTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLineTermAccess().getCommaKeyword_0()); 
    }

    |
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLineTermAccess().getSemicolonKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleNamespace
entryRuleNamespace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceRule()); }
	 iv_ruleNamespace=ruleNamespace 
	 { $current=$iv_ruleNamespace.current; } 
	 EOF 
;

// Rule Namespace
ruleNamespace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='namespace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamespaceAccess().getNamespaceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceAccess().getLangSupportedLangsEnumRuleCall_1_0()); 
	    }
		lv_lang_1_0=ruleSupportedLangs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceRule());
	        }
       		set(
       			$current, 
       			"lang",
        		lv_lang_1_0, 
        		"SupportedLangs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_ns_2_0=RULE_STRING
		{
			newLeafNode(lv_ns_2_0, grammarAccess.getNamespaceAccess().getNsSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamespaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ns",
        		lv_ns_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleDefaultNameSpace
entryRuleDefaultNameSpace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultNameSpaceRule()); }
	 iv_ruleDefaultNameSpace=ruleDefaultNameSpace 
	 { $current=$iv_ruleDefaultNameSpace.current; } 
	 EOF 
;

// Rule DefaultNameSpace
ruleDefaultNameSpace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='namespace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefaultNameSpaceAccess().getNamespaceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultNameSpaceAccess().getDefDefaultQualifierParserRuleCall_1_0()); 
	    }
		lv_def_1_0=ruleDefaultQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultNameSpaceRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_1_0, 
        		"DefaultQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultNameSpaceAccess().getNsQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_ns_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultNameSpaceRule());
	        }
       		set(
       			$current, 
       			"ns",
        		lv_ns_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefaultQualifier
entryRuleDefaultQualifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultQualifierRule()); } 
	 iv_ruleDefaultQualifier=ruleDefaultQualifier 
	 { $current=$iv_ruleDefaultQualifier.current.getText(); }  
	 EOF 
;

// Rule DefaultQualifier
ruleDefaultQualifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getDefaultQualifierAccess().getIDTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefaultQualifierAccess().getFullStopKeyword_1()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getDefaultQualifierAccess().getIDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getSolidusKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1()); 
    }
)*
    ;





// Entry rule entryRuleImportStatement
entryRuleImportStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportStatementRule()); }
	 iv_ruleImportStatement=ruleImportStatement 
	 { $current=$iv_ruleImportStatement.current; } 
	 EOF 
;

// Rule ImportStatement
ruleImportStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportStatementAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportStatementAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	 iv_ruleEnum=ruleEnum 
	 { $current=$iv_ruleEnum.current; } 
	 EOF 
;

// Rule Enum
ruleEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getCommentCommentTypeParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleCommentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"CommentType");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='enum' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumAccess().getEnumKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getPropertiesEnumPropertyParserRuleCall_4_0()); 
	    }
		lv_properties_4_0=ruleEnumProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_4_0, 
        		"EnumProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEnumProperty
entryRuleEnumProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumPropertyRule()); }
	 iv_ruleEnumProperty=ruleEnumProperty 
	 { $current=$iv_ruleEnumProperty.current; } 
	 EOF 
;

// Rule EnumProperty
ruleEnumProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyAccess().getCommentCommentTypeParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleCommentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"CommentType");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyAccess().getNameEnumPropertyIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEnumPropertyId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EnumPropertyId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumPropertyAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyAccess().getTypeEnumOrdinalParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleEnumOrdinal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"EnumOrdinal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getEnumPropertyAccess().getLineTermParserRuleCall_4()); 
    }
ruleLineTerm
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleEnumOrdinal
entryRuleEnumOrdinal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumOrdinalRule()); }
	 iv_ruleEnumOrdinal=ruleEnumOrdinal 
	 { $current=$iv_ruleEnumOrdinal.current; } 
	 EOF 
;

// Rule EnumOrdinal
ruleEnumOrdinal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_type_0_0=RULE_INT
		{
			newLeafNode(lv_type_0_0, grammarAccess.getEnumOrdinalAccess().getTypeINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumOrdinalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleEnumPropertyId
entryRuleEnumPropertyId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumPropertyIdRule()); }
	 iv_ruleEnumPropertyId=ruleEnumPropertyId 
	 { $current=$iv_ruleEnumPropertyId.current; } 
	 EOF 
;

// Rule EnumPropertyId
ruleEnumPropertyId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumPropertyIdAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumPropertyIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleConst
entryRuleConst returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	 iv_ruleConst=ruleConst 
	 { $current=$iv_ruleConst.current; } 
	 EOF 
;

// Rule Const
ruleConst returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstAccess().getCommentCommentTypeParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleCommentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"CommentType");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='const' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstAccess().getConstKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConstAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstAccess().getPropertiesConstPropertyParserRuleCall_4_0()); 
	    }
		lv_properties_4_0=ruleConstProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_4_0, 
        		"ConstProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleConstProperty
entryRuleConstProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstPropertyRule()); }
	 iv_ruleConstProperty=ruleConstProperty 
	 { $current=$iv_ruleConstProperty.current; } 
	 EOF 
;

// Rule ConstProperty
ruleConstProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstPropertyAccess().getCommentCommentTypeParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleCommentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstPropertyRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"CommentType");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getConstPropertyAccess().getNameConstPropertyIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleConstPropertyId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstPropertyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ConstPropertyId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstPropertyAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstPropertyAccess().getValConstValueTypeParserRuleCall_3_0()); 
	    }
		lv_val_3_0=ruleConstValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstPropertyRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_3_0, 
        		"ConstValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getConstPropertyAccess().getLineTermParserRuleCall_4()); 
    }
ruleLineTerm
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleConstValueType
entryRuleConstValueType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstValueTypeRule()); }
	 iv_ruleConstValueType=ruleConstValueType 
	 { $current=$iv_ruleConstValueType.current; } 
	 EOF 
;

// Rule ConstValueType
ruleConstValueType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_stringVal_0_0=RULE_STRING
		{
			newLeafNode(lv_stringVal_0_0, grammarAccess.getConstValueTypeAccess().getStringValSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstValueTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringVal",
        		lv_stringVal_0_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_boolVal_1_0=RULE_BOOL
		{
			newLeafNode(lv_boolVal_1_0, grammarAccess.getConstValueTypeAccess().getBoolValBOOLTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstValueTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"boolVal",
        		lv_boolVal_1_0, 
        		"BOOL");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstValueTypeAccess().getNumValConstNumValueParserRuleCall_2_0()); 
	    }
		lv_numVal_2_0=ruleConstNumValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstValueTypeRule());
	        }
       		set(
       			$current, 
       			"numVal",
        		lv_numVal_2_0, 
        		"ConstNumValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstNumValue
entryRuleConstNumValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstNumValueRule()); } 
	 iv_ruleConstNumValue=ruleConstNumValue 
	 { $current=$iv_ruleConstNumValue.current.getText(); }  
	 EOF 
;

// Rule ConstNumValue
ruleConstNumValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstNumValueAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getConstNumValueAccess().getINTTerminalRuleCall_1()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstNumValueAccess().getFullStopKeyword_2_0()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getConstNumValueAccess().getINTTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleConstPropertyId
entryRuleConstPropertyId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstPropertyIdRule()); }
	 iv_ruleConstPropertyId=ruleConstPropertyId 
	 { $current=$iv_ruleConstPropertyId.current; } 
	 EOF 
;

// Rule ConstPropertyId
ruleConstPropertyId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getConstPropertyIdAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstPropertyIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleStruct
entryRuleStruct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructRule()); }
	 iv_ruleStruct=ruleStruct 
	 { $current=$iv_ruleStruct.current; } 
	 EOF 
;

// Rule Struct
ruleStruct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructAccess().getCommentCommentTypeParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleCommentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"CommentType");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getStructAccess().getAttributesAttributeParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='struct' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStructAccess().getStructKeyword_2());
    }
(	otherlv_3='abstract' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStructAccess().getAbstractKeyword_3());
    }
)?(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getStructAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)(	otherlv_5='extends' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStructAccess().getExtendsKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getStructAccess().getSuperTypeStructCrossReference_5_1_0()); 
	}

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStructAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructAccess().getPropertiesPropertyParserRuleCall_7_0()); 
	    }
		lv_properties_8_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_8_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStructAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getCommentCommentTypeParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleCommentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"CommentType");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getAttributesAttributeParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getDateTypeDataTypeReferenceParserRuleCall_2_0_0()); 
	    }
		lv_dateType_2_0=ruleDataTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"dateType",
        		lv_dateType_2_0, 
        		"DataTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getPropertyAccess().getElementTypeElementTypeReferenceCrossReference_2_1_0()); 
	}

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getNamePropertyValueParserRuleCall_3_0()); 
	    }
		lv_name_4_0=rulePropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"PropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getPropertyAccess().getLineTermParserRuleCall_4()); 
    }
ruleLineTerm
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyValueRule()); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPropertyValueAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleService
entryRuleService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	 iv_ruleService=ruleService 
	 { $current=$iv_ruleService.current; } 
	 EOF 
;

// Rule Service
ruleService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getCommentCommentTypeParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleCommentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"CommentType");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getAttributesAttributeParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='service' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getServiceKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getServiceAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getServiceMethodsServiceMethodParserRuleCall_5_0()); 
	    }
		lv_serviceMethods_5_0=ruleServiceMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"serviceMethods",
        		lv_serviceMethods_5_0, 
        		"ServiceMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleServiceMethod
entryRuleServiceMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceMethodRule()); }
	 iv_ruleServiceMethod=ruleServiceMethod 
	 { $current=$iv_ruleServiceMethod.current; } 
	 EOF 
;

// Rule ServiceMethod
ruleServiceMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getServiceMethodAccess().getCommentCommentTypeParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleCommentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceMethodRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"CommentType");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceMethodAccess().getAttributesAttributeParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceMethodRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceMethodAccess().getReturnServiceMethodReturnTypeParserRuleCall_2_0()); 
	    }
		lv_return_2_0=ruleServiceMethodReturnType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceMethodRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_2_0, 
        		"ServiceMethodReturnType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getServiceMethodAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getServiceMethodAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceMethodAccess().getPropertiesServicePropertyParserRuleCall_5_0()); 
	    }
		lv_properties_5_0=ruleServiceProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceMethodRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_5_0, 
        		"ServiceProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getServiceMethodAccess().getRightParenthesisKeyword_6());
    }
(
    { 
        newCompositeNode(grammarAccess.getServiceMethodAccess().getLineTermParserRuleCall_7()); 
    }
ruleLineTerm
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleServiceProperty
entryRuleServiceProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServicePropertyRule()); }
	 iv_ruleServiceProperty=ruleServiceProperty 
	 { $current=$iv_ruleServiceProperty.current; } 
	 EOF 
;

// Rule ServiceProperty
ruleServiceProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getServicePropertyAccess().getNamePropertyParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServicePropertyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleServiceMethodReturnType
entryRuleServiceMethodReturnType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceMethodReturnTypeRule()); }
	 iv_ruleServiceMethodReturnType=ruleServiceMethodReturnType 
	 { $current=$iv_ruleServiceMethodReturnType.current; } 
	 EOF 
;

// Rule ServiceMethodReturnType
ruleServiceMethodReturnType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_voidType_0_0=	'void' 
    {
        newLeafNode(lv_voidType_0_0, grammarAccess.getServiceMethodReturnTypeAccess().getVoidTypeVoidKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceMethodReturnTypeRule());
	        }
       		setWithLastConsumed($current, "voidType", lv_voidType_0_0, "void");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceMethodReturnTypeAccess().getDataTypeDataTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_dataType_1_0=ruleDataTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceMethodReturnTypeRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_1_0, 
        		"DataTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceMethodReturnTypeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getServiceMethodReturnTypeAccess().getElementTypeElementTypeReferenceCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleDataTypeReference
entryRuleDataTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeReferenceRule()); }
	 iv_ruleDataTypeReference=ruleDataTypeReference 
	 { $current=$iv_ruleDataTypeReference.current; } 
	 EOF 
;

// Rule DataTypeReference
ruleDataTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeReferenceAccess().getTypeDataTypeEnumEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleDataTypeEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeReferenceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"DataTypeEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getDataTypeReferenceAccess().getListTypeParserRuleCall_1()); 
    }
    this_ListType_1=ruleListType
    { 
        $current = $this_ListType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeReferenceAccess().getMapTypeParserRuleCall_2()); 
    }
    this_MapType_2=ruleMapType
    { 
        $current = $this_MapType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleListType
entryRuleListType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListTypeRule()); }
	 iv_ruleListType=ruleListType 
	 { $current=$iv_ruleListType.current; } 
	 EOF 
;

// Rule ListType
ruleListType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='list' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getListTypeAccess().getListKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListTypeAccess().getLessThanSignKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListTypeAccess().getDateTypeDataTypeReferenceParserRuleCall_2_0_0()); 
	    }
		lv_dateType_2_0=ruleDataTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTypeRule());
	        }
       		set(
       			$current, 
       			"dateType",
        		lv_dateType_2_0, 
        		"DataTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getListTypeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getListTypeAccess().getElementTypeElementTypeReferenceCrossReference_2_1_0()); 
	}

)
))	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getListTypeAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleMapType
entryRuleMapType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	 iv_ruleMapType=ruleMapType 
	 { $current=$iv_ruleMapType.current; } 
	 EOF 
;

// Rule MapType
ruleMapType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='map' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMapTypeAccess().getMapKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMapTypeAccess().getLessThanSignKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMapTypeAccess().getKeyDataTypeDataTypeReferenceParserRuleCall_2_0_0()); 
	    }
		lv_keyDataType_2_0=ruleDataTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapTypeRule());
	        }
       		set(
       			$current, 
       			"keyDataType",
        		lv_keyDataType_2_0, 
        		"DataTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMapTypeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getMapTypeAccess().getKeyElementTypeElementTypeReferenceCrossReference_2_1_0()); 
	}

)
))	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMapTypeAccess().getCommaKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMapTypeAccess().getValDataTypeDataTypeReferenceParserRuleCall_4_0_0()); 
	    }
		lv_valDataType_5_0=ruleDataTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapTypeRule());
	        }
       		set(
       			$current, 
       			"valDataType",
        		lv_valDataType_5_0, 
        		"DataTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMapTypeRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getMapTypeAccess().getValElementTypeElementTypeReferenceCrossReference_4_1_0()); 
	}

)
))	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMapTypeAccess().getGreaterThanSignKeyword_5());
    }
)
;





// Entry rule entryRuleCommentType
entryRuleCommentType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentTypeRule()); } 
	 iv_ruleCommentType=ruleCommentType 
	 { $current=$iv_ruleCommentType.current.getText(); }  
	 EOF 
;

// Rule CommentType
ruleCommentType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SL_COMMENT_0=RULE_SL_COMMENT    {
		$current.merge(this_SL_COMMENT_0);
    }

    { 
    newLeafNode(this_SL_COMMENT_0, grammarAccess.getCommentTypeAccess().getSL_COMMENTTerminalRuleCall_0()); 
    }

    |    this_ML_COMMENT_1=RULE_ML_COMMENT    {
		$current.merge(this_ML_COMMENT_1);
    }

    { 
    newLeafNode(this_ML_COMMENT_1, grammarAccess.getCommentTypeAccess().getML_COMMENTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getCommercialAtKeyword_0_0());
    }
(
(
		lv_scope_1_0=RULE_ID
		{
			newLeafNode(lv_scope_1_0, grammarAccess.getAttributeAccess().getScopeIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"scope",
        		lv_scope_1_0, 
        		"ID");
	    }

)
))?(
(
		lv_attr_2_0=RULE_ATTR
		{
			newLeafNode(lv_attr_2_0, grammarAccess.getAttributeAccess().getAttrATTRTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attr",
        		lv_attr_2_0, 
        		"ATTR");
	    }

)
))
;





// Rule DataTypeEnum
ruleDataTypeEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='bool' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getBOOLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataTypeEnumAccess().getBOOLEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='byte' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getBYTEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataTypeEnumAccess().getBYTEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='uint16' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getUNIT16EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDataTypeEnumAccess().getUNIT16EnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='uint32' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getUINT32EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDataTypeEnumAccess().getUINT32EnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='uint64' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getUNIT64EnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getDataTypeEnumAccess().getUNIT64EnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='sbyte' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getSBYTEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getDataTypeEnumAccess().getSBYTEEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='int16' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getINT16EnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getDataTypeEnumAccess().getINT16EnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='int32' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getINT32EnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getDataTypeEnumAccess().getINT32EnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='int64' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getINT64EnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getDataTypeEnumAccess().getINT64EnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='float32' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getFLOAT32EnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getDataTypeEnumAccess().getFLOAT32EnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='float64' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getFLOAT64EnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getDataTypeEnumAccess().getFLOAT64EnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='string' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getSTRINGEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getDataTypeEnumAccess().getSTRINGEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='datetime' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getDATETIMEEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getDataTypeEnumAccess().getDATETIMEEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='decimal' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getDECIMALEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getDataTypeEnumAccess().getDECIMALEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='char' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getCHAREnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getDataTypeEnumAccess().getCHAREnumLiteralDeclaration_14()); 
    }
)
    |(	enumLiteral_15='binary' 
	{
        $current = grammarAccess.getDataTypeEnumAccess().getBINARYEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getDataTypeEnumAccess().getBINARYEnumLiteralDeclaration_15()); 
    }
));



// Rule SupportedLangs
ruleSupportedLangs returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='java' 
	{
        $current = grammarAccess.getSupportedLangsAccess().getJAVAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSupportedLangsAccess().getJAVAEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='csharp' 
	{
        $current = grammarAccess.getSupportedLangsAccess().getCSHARPEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSupportedLangsAccess().getCSHARPEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='asp' 
	{
        $current = grammarAccess.getSupportedLangsAccess().getASPEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSupportedLangsAccess().getASPEnumLiteralDeclaration_2()); 
    }
));



RULE_ATTR : '[' ( options {greedy=false;} : . )*']';

RULE_BOOL : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


