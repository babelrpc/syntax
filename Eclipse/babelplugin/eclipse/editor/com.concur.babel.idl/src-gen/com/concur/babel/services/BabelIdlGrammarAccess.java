/*
* generated by Xtext
*/
package com.concur.babel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BabelIdlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BabelIdlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BabelIdl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentCommentTypeParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportStatementParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cDefaultNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultNamespaceDefaultNameSpaceParserRuleCall_2_0 = (RuleCall)cDefaultNamespaceAssignment_2.eContents().get(0);
		private final Assignment cNamespacesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamespacesNamespaceParserRuleCall_3_0 = (RuleCall)cNamespacesAssignment_3.eContents().get(0);
		private final Assignment cDefinitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionsBabelDefinitionParserRuleCall_4_0 = (RuleCall)cDefinitionsAssignment_4.eContents().get(0);
		
		//BabelIdl:
		//	comment+=CommentType* imports+=ImportStatement* defaultNamespace=DefaultNameSpace namespaces+=Namespace*
		//	definitions+=BabelDefinition*;
		public ParserRule getRule() { return rule; }

		//comment+=CommentType* imports+=ImportStatement* defaultNamespace=DefaultNameSpace namespaces+=Namespace*
		//definitions+=BabelDefinition*
		public Group getGroup() { return cGroup; }

		//comment+=CommentType*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//CommentType
		public RuleCall getCommentCommentTypeParserRuleCall_0_0() { return cCommentCommentTypeParserRuleCall_0_0; }

		//imports+=ImportStatement*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//ImportStatement
		public RuleCall getImportsImportStatementParserRuleCall_1_0() { return cImportsImportStatementParserRuleCall_1_0; }

		//defaultNamespace=DefaultNameSpace
		public Assignment getDefaultNamespaceAssignment_2() { return cDefaultNamespaceAssignment_2; }

		//DefaultNameSpace
		public RuleCall getDefaultNamespaceDefaultNameSpaceParserRuleCall_2_0() { return cDefaultNamespaceDefaultNameSpaceParserRuleCall_2_0; }

		//namespaces+=Namespace*
		public Assignment getNamespacesAssignment_3() { return cNamespacesAssignment_3; }

		//Namespace
		public RuleCall getNamespacesNamespaceParserRuleCall_3_0() { return cNamespacesNamespaceParserRuleCall_3_0; }

		//definitions+=BabelDefinition*
		public Assignment getDefinitionsAssignment_4() { return cDefinitionsAssignment_4; }

		//BabelDefinition
		public RuleCall getDefinitionsBabelDefinitionParserRuleCall_4_0() { return cDefinitionsBabelDefinitionParserRuleCall_4_0; }
	}

	public class BabelDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BabelDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cServiceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BabelDefinition:
		//	Enum | Struct | Const | Service;
		public ParserRule getRule() { return rule; }

		//Enum | Struct | Const | Service
		public Alternatives getAlternatives() { return cAlternatives; }

		//Enum
		public RuleCall getEnumParserRuleCall_0() { return cEnumParserRuleCall_0; }

		//Struct
		public RuleCall getStructParserRuleCall_1() { return cStructParserRuleCall_1; }

		//Const
		public RuleCall getConstParserRuleCall_2() { return cConstParserRuleCall_2; }

		//Service
		public RuleCall getServiceParserRuleCall_3() { return cServiceParserRuleCall_3; }
	}

	public class LineTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LineTerm:
		//	"," | ";";
		public ParserRule getRule() { return rule; }

		//"," | ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLangAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLangSupportedLangsEnumRuleCall_1_0 = (RuleCall)cLangAssignment_1.eContents().get(0);
		private final Assignment cNsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNsSTRINGTerminalRuleCall_2_0 = (RuleCall)cNsAssignment_2.eContents().get(0);
		
		//Namespace:
		//	"namespace" lang=SupportedLangs ns=STRING;
		public ParserRule getRule() { return rule; }

		//"namespace" lang=SupportedLangs ns=STRING
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//lang=SupportedLangs
		public Assignment getLangAssignment_1() { return cLangAssignment_1; }

		//SupportedLangs
		public RuleCall getLangSupportedLangsEnumRuleCall_1_0() { return cLangSupportedLangsEnumRuleCall_1_0; }

		//ns=STRING
		public Assignment getNsAssignment_2() { return cNsAssignment_2; }

		//STRING
		public RuleCall getNsSTRINGTerminalRuleCall_2_0() { return cNsSTRINGTerminalRuleCall_2_0; }
	}

	public class DefaultNameSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultNameSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefDefaultQualifierParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		private final Assignment cNsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNsQualifiedNameParserRuleCall_2_0 = (RuleCall)cNsAssignment_2.eContents().get(0);
		
		//DefaultNameSpace:
		//	"namespace" def=DefaultQualifier ns=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"namespace" def=DefaultQualifier ns=QualifiedName
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//def=DefaultQualifier
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//DefaultQualifier
		public RuleCall getDefDefaultQualifierParserRuleCall_1_0() { return cDefDefaultQualifierParserRuleCall_1_0; }

		//ns=QualifiedName
		public Assignment getNsAssignment_2() { return cNsAssignment_2; }

		//QualifiedName
		public RuleCall getNsQualifiedNameParserRuleCall_2_0() { return cNsQualifiedNameParserRuleCall_2_0; }
	}

	public class DefaultQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DefaultQualifier:
		//	ID "." ID;
		public ParserRule getRule() { return rule; }

		//ID "." ID
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QualifiedName:
		//	("/" ID)*;
		public ParserRule getRule() { return rule; }

		//("/" ID)*
		public Group getGroup() { return cGroup; }

		//"/"
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//ImportStatement:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentCommentTypeParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesEnumPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enum:
		//	comment+=CommentType* "enum" name=ID "{" properties+=EnumProperty* "}";
		public ParserRule getRule() { return rule; }

		//comment+=CommentType* "enum" name=ID "{" properties+=EnumProperty* "}"
		public Group getGroup() { return cGroup; }

		//comment+=CommentType*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//CommentType
		public RuleCall getCommentCommentTypeParserRuleCall_0_0() { return cCommentCommentTypeParserRuleCall_0_0; }

		//"enum"
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=EnumProperty*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//EnumProperty
		public RuleCall getPropertiesEnumPropertyParserRuleCall_4_0() { return cPropertiesEnumPropertyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EnumPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentCommentTypeParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEnumPropertyIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeEnumOrdinalParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cLineTermParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//EnumProperty:
		//	comment+=CommentType* name=EnumPropertyId "=" type=EnumOrdinal LineTerm?;
		public ParserRule getRule() { return rule; }

		//comment+=CommentType* name=EnumPropertyId "=" type=EnumOrdinal LineTerm?
		public Group getGroup() { return cGroup; }

		//comment+=CommentType*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//CommentType
		public RuleCall getCommentCommentTypeParserRuleCall_0_0() { return cCommentCommentTypeParserRuleCall_0_0; }

		//name=EnumPropertyId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EnumPropertyId
		public RuleCall getNameEnumPropertyIdParserRuleCall_1_0() { return cNameEnumPropertyIdParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//type=EnumOrdinal
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//EnumOrdinal
		public RuleCall getTypeEnumOrdinalParserRuleCall_3_0() { return cTypeEnumOrdinalParserRuleCall_3_0; }

		//LineTerm?
		public RuleCall getLineTermParserRuleCall_4() { return cLineTermParserRuleCall_4; }
	}

	public class EnumOrdinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumOrdinal");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeINTTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//EnumOrdinal:
		//	type=INT;
		public ParserRule getRule() { return rule; }

		//type=INT
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//INT
		public RuleCall getTypeINTTerminalRuleCall_0() { return cTypeINTTerminalRuleCall_0; }
	}

	public class EnumPropertyIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumPropertyId");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumPropertyId:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentCommentTypeParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesConstPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Const:
		//	comment+=CommentType* "const" name=ID "{" properties+=ConstProperty* "}";
		public ParserRule getRule() { return rule; }

		//comment+=CommentType* "const" name=ID "{" properties+=ConstProperty* "}"
		public Group getGroup() { return cGroup; }

		//comment+=CommentType*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//CommentType
		public RuleCall getCommentCommentTypeParserRuleCall_0_0() { return cCommentCommentTypeParserRuleCall_0_0; }

		//"const"
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=ConstProperty*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//ConstProperty
		public RuleCall getPropertiesConstPropertyParserRuleCall_4_0() { return cPropertiesConstPropertyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ConstPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentCommentTypeParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameConstPropertyIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValConstValueTypeParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		private final RuleCall cLineTermParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ConstProperty:
		//	comment+=CommentType* name=ConstPropertyId "=" val=ConstValueType LineTerm?;
		public ParserRule getRule() { return rule; }

		//comment+=CommentType* name=ConstPropertyId "=" val=ConstValueType LineTerm?
		public Group getGroup() { return cGroup; }

		//comment+=CommentType*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//CommentType
		public RuleCall getCommentCommentTypeParserRuleCall_0_0() { return cCommentCommentTypeParserRuleCall_0_0; }

		//name=ConstPropertyId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ConstPropertyId
		public RuleCall getNameConstPropertyIdParserRuleCall_1_0() { return cNameConstPropertyIdParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//val=ConstValueType
		public Assignment getValAssignment_3() { return cValAssignment_3; }

		//ConstValueType
		public RuleCall getValConstValueTypeParserRuleCall_3_0() { return cValConstValueTypeParserRuleCall_3_0; }

		//LineTerm?
		public RuleCall getLineTermParserRuleCall_4() { return cLineTermParserRuleCall_4; }
	}

	public class ConstValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringValSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringValAssignment_0.eContents().get(0);
		private final Assignment cBoolValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBoolValBOOLTerminalRuleCall_1_0 = (RuleCall)cBoolValAssignment_1.eContents().get(0);
		private final Assignment cNumValAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumValConstNumValueParserRuleCall_2_0 = (RuleCall)cNumValAssignment_2.eContents().get(0);
		
		//ConstValueType:
		//	stringVal=STRING | boolVal=BOOL | numVal=ConstNumValue;
		public ParserRule getRule() { return rule; }

		//stringVal=STRING | boolVal=BOOL | numVal=ConstNumValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//stringVal=STRING
		public Assignment getStringValAssignment_0() { return cStringValAssignment_0; }

		//STRING
		public RuleCall getStringValSTRINGTerminalRuleCall_0_0() { return cStringValSTRINGTerminalRuleCall_0_0; }

		//boolVal=BOOL
		public Assignment getBoolValAssignment_1() { return cBoolValAssignment_1; }

		//BOOL
		public RuleCall getBoolValBOOLTerminalRuleCall_1_0() { return cBoolValBOOLTerminalRuleCall_1_0; }

		//numVal=ConstNumValue
		public Assignment getNumValAssignment_2() { return cNumValAssignment_2; }

		//ConstNumValue
		public RuleCall getNumValConstNumValueParserRuleCall_2_0() { return cNumValConstNumValueParserRuleCall_2_0; }
	}

	public class ConstNumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstNumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//ConstNumValue:
		//	"-"? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class ConstPropertyIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstPropertyId");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ConstPropertyId:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Struct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentCommentTypeParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Keyword cStructKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAbstractKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuperTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSuperTypeStructCrossReference_5_1_0 = (CrossReference)cSuperTypeAssignment_5_1.eContents().get(0);
		private final RuleCall cSuperTypeStructIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSuperTypeStructCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPropertiesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPropertiesPropertyParserRuleCall_7_0 = (RuleCall)cPropertiesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Struct:
		//	comment+=CommentType* attributes+=Attribute* "struct" "abstract"? name=ID ("extends" superType=[Struct])? "{"
		//	properties+=Property* "}";
		public ParserRule getRule() { return rule; }

		//comment+=CommentType* attributes+=Attribute* "struct" "abstract"? name=ID ("extends" superType=[Struct])? "{"
		//properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//comment+=CommentType*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//CommentType
		public RuleCall getCommentCommentTypeParserRuleCall_0_0() { return cCommentCommentTypeParserRuleCall_0_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_0() { return cAttributesAttributeParserRuleCall_1_0; }

		//"struct"
		public Keyword getStructKeyword_2() { return cStructKeyword_2; }

		//"abstract"?
		public Keyword getAbstractKeyword_3() { return cAbstractKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//("extends" superType=[Struct])?
		public Group getGroup_5() { return cGroup_5; }

		//"extends"
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//superType=[Struct]
		public Assignment getSuperTypeAssignment_5_1() { return cSuperTypeAssignment_5_1; }

		//[Struct]
		public CrossReference getSuperTypeStructCrossReference_5_1_0() { return cSuperTypeStructCrossReference_5_1_0; }

		//ID
		public RuleCall getSuperTypeStructIDTerminalRuleCall_5_1_0_1() { return cSuperTypeStructIDTerminalRuleCall_5_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_7() { return cPropertiesAssignment_7; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_7_0() { return cPropertiesPropertyParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentCommentTypeParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDateTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDateTypeDataTypeReferenceParserRuleCall_2_0_0 = (RuleCall)cDateTypeAssignment_2_0.eContents().get(0);
		private final Assignment cElementTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cElementTypeElementTypeReferenceCrossReference_2_1_0 = (CrossReference)cElementTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cElementTypeElementTypeReferenceCrossReference_2_1_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamePropertyValueParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cLineTermParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Property:
		//	comment+=CommentType* attributes+=Attribute* (dateType=DataTypeReference | elementType=[ElementTypeReference])
		//	name=PropertyValue LineTerm?;
		public ParserRule getRule() { return rule; }

		//comment+=CommentType* attributes+=Attribute* (dateType=DataTypeReference | elementType=[ElementTypeReference])
		//name=PropertyValue LineTerm?
		public Group getGroup() { return cGroup; }

		//comment+=CommentType*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//CommentType
		public RuleCall getCommentCommentTypeParserRuleCall_0_0() { return cCommentCommentTypeParserRuleCall_0_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_0() { return cAttributesAttributeParserRuleCall_1_0; }

		//dateType=DataTypeReference | elementType=[ElementTypeReference]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//dateType=DataTypeReference
		public Assignment getDateTypeAssignment_2_0() { return cDateTypeAssignment_2_0; }

		//DataTypeReference
		public RuleCall getDateTypeDataTypeReferenceParserRuleCall_2_0_0() { return cDateTypeDataTypeReferenceParserRuleCall_2_0_0; }

		//elementType=[ElementTypeReference]
		public Assignment getElementTypeAssignment_2_1() { return cElementTypeAssignment_2_1; }

		//[ElementTypeReference]
		public CrossReference getElementTypeElementTypeReferenceCrossReference_2_1_0() { return cElementTypeElementTypeReferenceCrossReference_2_1_0; }

		//ID
		public RuleCall getElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1() { return cElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1; }

		//name=PropertyValue
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//PropertyValue
		public RuleCall getNamePropertyValueParserRuleCall_3_0() { return cNamePropertyValueParserRuleCall_3_0; }

		//LineTerm?
		public RuleCall getLineTermParserRuleCall_4() { return cLineTermParserRuleCall_4; }
	}

	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PropertyValue:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentCommentTypeParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Keyword cServiceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cServiceMethodsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cServiceMethodsServiceMethodParserRuleCall_5_0 = (RuleCall)cServiceMethodsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Service:
		//	comment+=CommentType* attributes+=Attribute* "service" name=ID "{" serviceMethods+=ServiceMethod* "}";
		public ParserRule getRule() { return rule; }

		//comment+=CommentType* attributes+=Attribute* "service" name=ID "{" serviceMethods+=ServiceMethod* "}"
		public Group getGroup() { return cGroup; }

		//comment+=CommentType*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//CommentType
		public RuleCall getCommentCommentTypeParserRuleCall_0_0() { return cCommentCommentTypeParserRuleCall_0_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_0() { return cAttributesAttributeParserRuleCall_1_0; }

		//"service"
		public Keyword getServiceKeyword_2() { return cServiceKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//serviceMethods+=ServiceMethod*
		public Assignment getServiceMethodsAssignment_5() { return cServiceMethodsAssignment_5; }

		//ServiceMethod
		public RuleCall getServiceMethodsServiceMethodParserRuleCall_5_0() { return cServiceMethodsServiceMethodParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ServiceMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentCommentTypeParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Assignment cReturnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnServiceMethodReturnTypeParserRuleCall_2_0 = (RuleCall)cReturnAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesServicePropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cLineTermParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//ServiceMethod:
		//	comment+=CommentType* attributes+=Attribute* return=ServiceMethodReturnType name=ID "(" properties+=ServiceProperty*
		//	")" LineTerm?;
		public ParserRule getRule() { return rule; }

		//comment+=CommentType* attributes+=Attribute* return=ServiceMethodReturnType name=ID "(" properties+=ServiceProperty* ")"
		//LineTerm?
		public Group getGroup() { return cGroup; }

		//comment+=CommentType*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//CommentType
		public RuleCall getCommentCommentTypeParserRuleCall_0_0() { return cCommentCommentTypeParserRuleCall_0_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_0() { return cAttributesAttributeParserRuleCall_1_0; }

		//return=ServiceMethodReturnType
		public Assignment getReturnAssignment_2() { return cReturnAssignment_2; }

		//ServiceMethodReturnType
		public RuleCall getReturnServiceMethodReturnTypeParserRuleCall_2_0() { return cReturnServiceMethodReturnTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//properties+=ServiceProperty*
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }

		//ServiceProperty
		public RuleCall getPropertiesServicePropertyParserRuleCall_5_0() { return cPropertiesServicePropertyParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//LineTerm?
		public RuleCall getLineTermParserRuleCall_7() { return cLineTermParserRuleCall_7; }
	}

	public class ServicePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceProperty");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePropertyParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ServiceProperty:
		//	name=Property;
		public ParserRule getRule() { return rule; }

		//name=Property
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Property
		public RuleCall getNamePropertyParserRuleCall_0() { return cNamePropertyParserRuleCall_0; }
	}

	public class ServiceMethodReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceMethodReturnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVoidTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cVoidTypeVoidKeyword_0_0 = (Keyword)cVoidTypeAssignment_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeDataTypeReferenceParserRuleCall_1_0 = (RuleCall)cDataTypeAssignment_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cElementTypeElementTypeReferenceCrossReference_2_0 = (CrossReference)cElementTypeAssignment_2.eContents().get(0);
		private final RuleCall cElementTypeElementTypeReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cElementTypeElementTypeReferenceCrossReference_2_0.eContents().get(1);
		
		//ServiceMethodReturnType:
		//	voidType="void" | dataType=DataTypeReference | elementType=[ElementTypeReference];
		public ParserRule getRule() { return rule; }

		//voidType="void" | dataType=DataTypeReference | elementType=[ElementTypeReference]
		public Alternatives getAlternatives() { return cAlternatives; }

		//voidType="void"
		public Assignment getVoidTypeAssignment_0() { return cVoidTypeAssignment_0; }

		//"void"
		public Keyword getVoidTypeVoidKeyword_0_0() { return cVoidTypeVoidKeyword_0_0; }

		//dataType=DataTypeReference
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }

		//DataTypeReference
		public RuleCall getDataTypeDataTypeReferenceParserRuleCall_1_0() { return cDataTypeDataTypeReferenceParserRuleCall_1_0; }

		//elementType=[ElementTypeReference]
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }

		//[ElementTypeReference]
		public CrossReference getElementTypeElementTypeReferenceCrossReference_2_0() { return cElementTypeElementTypeReferenceCrossReference_2_0; }

		//ID
		public RuleCall getElementTypeElementTypeReferenceIDTerminalRuleCall_2_0_1() { return cElementTypeElementTypeReferenceIDTerminalRuleCall_2_0_1; }
	}

	public class DataTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDataTypeEnumEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cListTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMapTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DataTypeReference:
		//	type=DataTypeEnum | ListType | MapType;
		public ParserRule getRule() { return rule; }

		//type=DataTypeEnum | ListType | MapType
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=DataTypeEnum
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DataTypeEnum
		public RuleCall getTypeDataTypeEnumEnumRuleCall_0_0() { return cTypeDataTypeEnumEnumRuleCall_0_0; }

		//ListType
		public RuleCall getListTypeParserRuleCall_1() { return cListTypeParserRuleCall_1; }

		//MapType
		public RuleCall getMapTypeParserRuleCall_2() { return cMapTypeParserRuleCall_2; }
	}

	public class ElementTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementTypeReference:
		//	Struct | Enum;
		public ParserRule getRule() { return rule; }

		//Struct | Enum
		public Alternatives getAlternatives() { return cAlternatives; }

		//Struct
		public RuleCall getStructParserRuleCall_0() { return cStructParserRuleCall_0; }

		//Enum
		public RuleCall getEnumParserRuleCall_1() { return cEnumParserRuleCall_1; }
	}

	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDateTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDateTypeDataTypeReferenceParserRuleCall_2_0_0 = (RuleCall)cDateTypeAssignment_2_0.eContents().get(0);
		private final Assignment cElementTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cElementTypeElementTypeReferenceCrossReference_2_1_0 = (CrossReference)cElementTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cElementTypeElementTypeReferenceCrossReference_2_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListType:
		//	"list" "<" (dateType=DataTypeReference | elementType=[ElementTypeReference]) ">";
		public ParserRule getRule() { return rule; }

		//"list" "<" (dateType=DataTypeReference | elementType=[ElementTypeReference]) ">"
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//dateType=DataTypeReference | elementType=[ElementTypeReference]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//dateType=DataTypeReference
		public Assignment getDateTypeAssignment_2_0() { return cDateTypeAssignment_2_0; }

		//DataTypeReference
		public RuleCall getDateTypeDataTypeReferenceParserRuleCall_2_0_0() { return cDateTypeDataTypeReferenceParserRuleCall_2_0_0; }

		//elementType=[ElementTypeReference]
		public Assignment getElementTypeAssignment_2_1() { return cElementTypeAssignment_2_1; }

		//[ElementTypeReference]
		public CrossReference getElementTypeElementTypeReferenceCrossReference_2_1_0() { return cElementTypeElementTypeReferenceCrossReference_2_1_0; }

		//ID
		public RuleCall getElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1() { return cElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cKeyDataTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cKeyDataTypeDataTypeReferenceParserRuleCall_2_0_0 = (RuleCall)cKeyDataTypeAssignment_2_0.eContents().get(0);
		private final Assignment cKeyElementTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cKeyElementTypeElementTypeReferenceCrossReference_2_1_0 = (CrossReference)cKeyElementTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cKeyElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cKeyElementTypeElementTypeReferenceCrossReference_2_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cValDataTypeAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cValDataTypeDataTypeReferenceParserRuleCall_4_0_0 = (RuleCall)cValDataTypeAssignment_4_0.eContents().get(0);
		private final Assignment cValElementTypeAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cValElementTypeElementTypeReferenceCrossReference_4_1_0 = (CrossReference)cValElementTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cValElementTypeElementTypeReferenceIDTerminalRuleCall_4_1_0_1 = (RuleCall)cValElementTypeElementTypeReferenceCrossReference_4_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MapType:
		//	"map" "<" (keyDataType=DataTypeReference | keyElementType=[ElementTypeReference]) "," (valDataType=DataTypeReference |
		//	valElementType=[ElementTypeReference]) ">";
		public ParserRule getRule() { return rule; }

		//"map" "<" (keyDataType=DataTypeReference | keyElementType=[ElementTypeReference]) "," (valDataType=DataTypeReference |
		//valElementType=[ElementTypeReference]) ">"
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//keyDataType=DataTypeReference | keyElementType=[ElementTypeReference]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//keyDataType=DataTypeReference
		public Assignment getKeyDataTypeAssignment_2_0() { return cKeyDataTypeAssignment_2_0; }

		//DataTypeReference
		public RuleCall getKeyDataTypeDataTypeReferenceParserRuleCall_2_0_0() { return cKeyDataTypeDataTypeReferenceParserRuleCall_2_0_0; }

		//keyElementType=[ElementTypeReference]
		public Assignment getKeyElementTypeAssignment_2_1() { return cKeyElementTypeAssignment_2_1; }

		//[ElementTypeReference]
		public CrossReference getKeyElementTypeElementTypeReferenceCrossReference_2_1_0() { return cKeyElementTypeElementTypeReferenceCrossReference_2_1_0; }

		//ID
		public RuleCall getKeyElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1() { return cKeyElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//valDataType=DataTypeReference | valElementType=[ElementTypeReference]
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//valDataType=DataTypeReference
		public Assignment getValDataTypeAssignment_4_0() { return cValDataTypeAssignment_4_0; }

		//DataTypeReference
		public RuleCall getValDataTypeDataTypeReferenceParserRuleCall_4_0_0() { return cValDataTypeDataTypeReferenceParserRuleCall_4_0_0; }

		//valElementType=[ElementTypeReference]
		public Assignment getValElementTypeAssignment_4_1() { return cValElementTypeAssignment_4_1; }

		//[ElementTypeReference]
		public CrossReference getValElementTypeElementTypeReferenceCrossReference_4_1_0() { return cValElementTypeElementTypeReferenceCrossReference_4_1_0; }

		//ID
		public RuleCall getValElementTypeElementTypeReferenceIDTerminalRuleCall_4_1_0_1() { return cValElementTypeElementTypeReferenceIDTerminalRuleCall_4_1_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}

	public class CommentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSL_COMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cML_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CommentType:
		//	SL_COMMENT | ML_COMMENT;
		public ParserRule getRule() { return rule; }

		//SL_COMMENT | ML_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_0() { return cSL_COMMENTTerminalRuleCall_0; }

		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_1() { return cML_COMMENTTerminalRuleCall_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cScopeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cScopeIDTerminalRuleCall_0_1_0 = (RuleCall)cScopeAssignment_0_1.eContents().get(0);
		private final Assignment cAttrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrATTRTerminalRuleCall_1_0 = (RuleCall)cAttrAssignment_1.eContents().get(0);
		
		//Attribute:
		//	("@" scope=ID)? attr=ATTR;
		public ParserRule getRule() { return rule; }

		//("@" scope=ID)? attr=ATTR
		public Group getGroup() { return cGroup; }

		//("@" scope=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"@"
		public Keyword getCommercialAtKeyword_0_0() { return cCommercialAtKeyword_0_0; }

		//scope=ID
		public Assignment getScopeAssignment_0_1() { return cScopeAssignment_0_1; }

		//ID
		public RuleCall getScopeIDTerminalRuleCall_0_1_0() { return cScopeIDTerminalRuleCall_0_1_0; }

		//attr=ATTR
		public Assignment getAttrAssignment_1() { return cAttrAssignment_1; }

		//ATTR
		public RuleCall getAttrATTRTerminalRuleCall_1_0() { return cAttrATTRTerminalRuleCall_1_0; }
	}
	
	
	public class DataTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLBoolKeyword_0_0 = (Keyword)cBOOLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBYTEByteKeyword_1_0 = (Keyword)cBYTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNIT16EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNIT16Uint16Keyword_2_0 = (Keyword)cUNIT16EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUINT32EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUINT32Uint32Keyword_3_0 = (Keyword)cUINT32EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cUNIT64EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cUNIT64Uint64Keyword_4_0 = (Keyword)cUNIT64EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSBYTEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSBYTESbyteKeyword_5_0 = (Keyword)cSBYTEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cINT16EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cINT16Int16Keyword_6_0 = (Keyword)cINT16EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cINT32EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cINT32Int32Keyword_7_0 = (Keyword)cINT32EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cINT64EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cINT64Int64Keyword_8_0 = (Keyword)cINT64EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cFLOAT32EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cFLOAT32Float32Keyword_9_0 = (Keyword)cFLOAT32EnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cFLOAT64EnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cFLOAT64Float64Keyword_10_0 = (Keyword)cFLOAT64EnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cSTRINGStringKeyword_11_0 = (Keyword)cSTRINGEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cDATETIMEEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cDATETIMEDatetimeKeyword_12_0 = (Keyword)cDATETIMEEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cDECIMALEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cDECIMALDecimalKeyword_13_0 = (Keyword)cDECIMALEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cCHARCharKeyword_14_0 = (Keyword)cCHAREnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cBINARYEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cBINARYBinaryKeyword_15_0 = (Keyword)cBINARYEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum DataTypeEnum:
		//	BOOL="bool" | BYTE="byte" | UNIT16="uint16" | UINT32="uint32" | UNIT64="uint64" | SBYTE="sbyte" | INT16="int16" |
		//	INT32="int32" | INT64="int64" | FLOAT32="float32" | FLOAT64="float64" | STRING="string" | DATETIME="datetime" |
		//	DECIMAL="decimal" | CHAR="char" | BINARY="binary";
		public EnumRule getRule() { return rule; }

		//BOOL="bool" | BYTE="byte" | UNIT16="uint16" | UINT32="uint32" | UNIT64="uint64" | SBYTE="sbyte" | INT16="int16" |
		//INT32="int32" | INT64="int64" | FLOAT32="float32" | FLOAT64="float64" | STRING="string" | DATETIME="datetime" |
		//DECIMAL="decimal" | CHAR="char" | BINARY="binary"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOL="bool"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_0() { return cBOOLEnumLiteralDeclaration_0; }

		//"bool"
		public Keyword getBOOLBoolKeyword_0_0() { return cBOOLBoolKeyword_0_0; }

		//BYTE="byte"
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_1() { return cBYTEEnumLiteralDeclaration_1; }

		//"byte"
		public Keyword getBYTEByteKeyword_1_0() { return cBYTEByteKeyword_1_0; }

		//UNIT16="uint16"
		public EnumLiteralDeclaration getUNIT16EnumLiteralDeclaration_2() { return cUNIT16EnumLiteralDeclaration_2; }

		//"uint16"
		public Keyword getUNIT16Uint16Keyword_2_0() { return cUNIT16Uint16Keyword_2_0; }

		//UINT32="uint32"
		public EnumLiteralDeclaration getUINT32EnumLiteralDeclaration_3() { return cUINT32EnumLiteralDeclaration_3; }

		//"uint32"
		public Keyword getUINT32Uint32Keyword_3_0() { return cUINT32Uint32Keyword_3_0; }

		//UNIT64="uint64"
		public EnumLiteralDeclaration getUNIT64EnumLiteralDeclaration_4() { return cUNIT64EnumLiteralDeclaration_4; }

		//"uint64"
		public Keyword getUNIT64Uint64Keyword_4_0() { return cUNIT64Uint64Keyword_4_0; }

		//SBYTE="sbyte"
		public EnumLiteralDeclaration getSBYTEEnumLiteralDeclaration_5() { return cSBYTEEnumLiteralDeclaration_5; }

		//"sbyte"
		public Keyword getSBYTESbyteKeyword_5_0() { return cSBYTESbyteKeyword_5_0; }

		//INT16="int16"
		public EnumLiteralDeclaration getINT16EnumLiteralDeclaration_6() { return cINT16EnumLiteralDeclaration_6; }

		//"int16"
		public Keyword getINT16Int16Keyword_6_0() { return cINT16Int16Keyword_6_0; }

		//INT32="int32"
		public EnumLiteralDeclaration getINT32EnumLiteralDeclaration_7() { return cINT32EnumLiteralDeclaration_7; }

		//"int32"
		public Keyword getINT32Int32Keyword_7_0() { return cINT32Int32Keyword_7_0; }

		//INT64="int64"
		public EnumLiteralDeclaration getINT64EnumLiteralDeclaration_8() { return cINT64EnumLiteralDeclaration_8; }

		//"int64"
		public Keyword getINT64Int64Keyword_8_0() { return cINT64Int64Keyword_8_0; }

		//FLOAT32="float32"
		public EnumLiteralDeclaration getFLOAT32EnumLiteralDeclaration_9() { return cFLOAT32EnumLiteralDeclaration_9; }

		//"float32"
		public Keyword getFLOAT32Float32Keyword_9_0() { return cFLOAT32Float32Keyword_9_0; }

		//FLOAT64="float64"
		public EnumLiteralDeclaration getFLOAT64EnumLiteralDeclaration_10() { return cFLOAT64EnumLiteralDeclaration_10; }

		//"float64"
		public Keyword getFLOAT64Float64Keyword_10_0() { return cFLOAT64Float64Keyword_10_0; }

		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_11() { return cSTRINGEnumLiteralDeclaration_11; }

		//"string"
		public Keyword getSTRINGStringKeyword_11_0() { return cSTRINGStringKeyword_11_0; }

		//DATETIME="datetime"
		public EnumLiteralDeclaration getDATETIMEEnumLiteralDeclaration_12() { return cDATETIMEEnumLiteralDeclaration_12; }

		//"datetime"
		public Keyword getDATETIMEDatetimeKeyword_12_0() { return cDATETIMEDatetimeKeyword_12_0; }

		//DECIMAL="decimal"
		public EnumLiteralDeclaration getDECIMALEnumLiteralDeclaration_13() { return cDECIMALEnumLiteralDeclaration_13; }

		//"decimal"
		public Keyword getDECIMALDecimalKeyword_13_0() { return cDECIMALDecimalKeyword_13_0; }

		//CHAR="char"
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_14() { return cCHAREnumLiteralDeclaration_14; }

		//"char"
		public Keyword getCHARCharKeyword_14_0() { return cCHARCharKeyword_14_0; }

		//BINARY="binary"
		public EnumLiteralDeclaration getBINARYEnumLiteralDeclaration_15() { return cBINARYEnumLiteralDeclaration_15; }

		//"binary"
		public Keyword getBINARYBinaryKeyword_15_0() { return cBINARYBinaryKeyword_15_0; }
	}

	public class SupportedLangsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SupportedLangs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJAVAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJAVAJavaKeyword_0_0 = (Keyword)cJAVAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCSHARPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCSHARPCsharpKeyword_1_0 = (Keyword)cCSHARPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cASPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cASPAspKeyword_2_0 = (Keyword)cASPEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SupportedLangs:
		//	JAVA="java" | CSHARP="csharp" | ASP="asp";
		public EnumRule getRule() { return rule; }

		//JAVA="java" | CSHARP="csharp" | ASP="asp"
		public Alternatives getAlternatives() { return cAlternatives; }

		//JAVA="java"
		public EnumLiteralDeclaration getJAVAEnumLiteralDeclaration_0() { return cJAVAEnumLiteralDeclaration_0; }

		//"java"
		public Keyword getJAVAJavaKeyword_0_0() { return cJAVAJavaKeyword_0_0; }

		//CSHARP="csharp"
		public EnumLiteralDeclaration getCSHARPEnumLiteralDeclaration_1() { return cCSHARPEnumLiteralDeclaration_1; }

		//"csharp"
		public Keyword getCSHARPCsharpKeyword_1_0() { return cCSHARPCsharpKeyword_1_0; }

		//ASP="asp"
		public EnumLiteralDeclaration getASPEnumLiteralDeclaration_2() { return cASPEnumLiteralDeclaration_2; }

		//"asp"
		public Keyword getASPAspKeyword_2_0() { return cASPAspKeyword_2_0; }
	}
	
	private BabelIdlElements pBabelIdl;
	private BabelDefinitionElements pBabelDefinition;
	private LineTermElements pLineTerm;
	private NamespaceElements pNamespace;
	private DefaultNameSpaceElements pDefaultNameSpace;
	private DefaultQualifierElements pDefaultQualifier;
	private QualifiedNameElements pQualifiedName;
	private ImportStatementElements pImportStatement;
	private EnumElements pEnum;
	private EnumPropertyElements pEnumProperty;
	private EnumOrdinalElements pEnumOrdinal;
	private EnumPropertyIdElements pEnumPropertyId;
	private ConstElements pConst;
	private ConstPropertyElements pConstProperty;
	private ConstValueTypeElements pConstValueType;
	private ConstNumValueElements pConstNumValue;
	private ConstPropertyIdElements pConstPropertyId;
	private StructElements pStruct;
	private PropertyElements pProperty;
	private PropertyValueElements pPropertyValue;
	private ServiceElements pService;
	private ServiceMethodElements pServiceMethod;
	private ServicePropertyElements pServiceProperty;
	private ServiceMethodReturnTypeElements pServiceMethodReturnType;
	private DataTypeReferenceElements pDataTypeReference;
	private ElementTypeReferenceElements pElementTypeReference;
	private ListTypeElements pListType;
	private MapTypeElements pMapType;
	private CommentTypeElements pCommentType;
	private AttributeElements pAttribute;
	private TerminalRule tATTR;
	private DataTypeEnumElements unknownRuleDataTypeEnum;
	private SupportedLangsElements unknownRuleSupportedLangs;
	private TerminalRule tBOOL;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public BabelIdlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.concur.babel.BabelIdl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BabelIdl:
	//	comment+=CommentType* imports+=ImportStatement* defaultNamespace=DefaultNameSpace namespaces+=Namespace*
	//	definitions+=BabelDefinition*;
	public BabelIdlElements getBabelIdlAccess() {
		return (pBabelIdl != null) ? pBabelIdl : (pBabelIdl = new BabelIdlElements());
	}
	
	public ParserRule getBabelIdlRule() {
		return getBabelIdlAccess().getRule();
	}

	//BabelDefinition:
	//	Enum | Struct | Const | Service;
	public BabelDefinitionElements getBabelDefinitionAccess() {
		return (pBabelDefinition != null) ? pBabelDefinition : (pBabelDefinition = new BabelDefinitionElements());
	}
	
	public ParserRule getBabelDefinitionRule() {
		return getBabelDefinitionAccess().getRule();
	}

	//LineTerm:
	//	"," | ";";
	public LineTermElements getLineTermAccess() {
		return (pLineTerm != null) ? pLineTerm : (pLineTerm = new LineTermElements());
	}
	
	public ParserRule getLineTermRule() {
		return getLineTermAccess().getRule();
	}

	//Namespace:
	//	"namespace" lang=SupportedLangs ns=STRING;
	public NamespaceElements getNamespaceAccess() {
		return (pNamespace != null) ? pNamespace : (pNamespace = new NamespaceElements());
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}

	//DefaultNameSpace:
	//	"namespace" def=DefaultQualifier ns=QualifiedName;
	public DefaultNameSpaceElements getDefaultNameSpaceAccess() {
		return (pDefaultNameSpace != null) ? pDefaultNameSpace : (pDefaultNameSpace = new DefaultNameSpaceElements());
	}
	
	public ParserRule getDefaultNameSpaceRule() {
		return getDefaultNameSpaceAccess().getRule();
	}

	//DefaultQualifier:
	//	ID "." ID;
	public DefaultQualifierElements getDefaultQualifierAccess() {
		return (pDefaultQualifier != null) ? pDefaultQualifier : (pDefaultQualifier = new DefaultQualifierElements());
	}
	
	public ParserRule getDefaultQualifierRule() {
		return getDefaultQualifierAccess().getRule();
	}

	//QualifiedName:
	//	("/" ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ImportStatement:
	//	"import" importURI=STRING;
	public ImportStatementElements getImportStatementAccess() {
		return (pImportStatement != null) ? pImportStatement : (pImportStatement = new ImportStatementElements());
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//Enum:
	//	comment+=CommentType* "enum" name=ID "{" properties+=EnumProperty* "}";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EnumProperty:
	//	comment+=CommentType* name=EnumPropertyId "=" type=EnumOrdinal LineTerm?;
	public EnumPropertyElements getEnumPropertyAccess() {
		return (pEnumProperty != null) ? pEnumProperty : (pEnumProperty = new EnumPropertyElements());
	}
	
	public ParserRule getEnumPropertyRule() {
		return getEnumPropertyAccess().getRule();
	}

	//EnumOrdinal:
	//	type=INT;
	public EnumOrdinalElements getEnumOrdinalAccess() {
		return (pEnumOrdinal != null) ? pEnumOrdinal : (pEnumOrdinal = new EnumOrdinalElements());
	}
	
	public ParserRule getEnumOrdinalRule() {
		return getEnumOrdinalAccess().getRule();
	}

	//EnumPropertyId:
	//	name=ID;
	public EnumPropertyIdElements getEnumPropertyIdAccess() {
		return (pEnumPropertyId != null) ? pEnumPropertyId : (pEnumPropertyId = new EnumPropertyIdElements());
	}
	
	public ParserRule getEnumPropertyIdRule() {
		return getEnumPropertyIdAccess().getRule();
	}

	//Const:
	//	comment+=CommentType* "const" name=ID "{" properties+=ConstProperty* "}";
	public ConstElements getConstAccess() {
		return (pConst != null) ? pConst : (pConst = new ConstElements());
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}

	//ConstProperty:
	//	comment+=CommentType* name=ConstPropertyId "=" val=ConstValueType LineTerm?;
	public ConstPropertyElements getConstPropertyAccess() {
		return (pConstProperty != null) ? pConstProperty : (pConstProperty = new ConstPropertyElements());
	}
	
	public ParserRule getConstPropertyRule() {
		return getConstPropertyAccess().getRule();
	}

	//ConstValueType:
	//	stringVal=STRING | boolVal=BOOL | numVal=ConstNumValue;
	public ConstValueTypeElements getConstValueTypeAccess() {
		return (pConstValueType != null) ? pConstValueType : (pConstValueType = new ConstValueTypeElements());
	}
	
	public ParserRule getConstValueTypeRule() {
		return getConstValueTypeAccess().getRule();
	}

	//ConstNumValue:
	//	"-"? INT ("." INT)?;
	public ConstNumValueElements getConstNumValueAccess() {
		return (pConstNumValue != null) ? pConstNumValue : (pConstNumValue = new ConstNumValueElements());
	}
	
	public ParserRule getConstNumValueRule() {
		return getConstNumValueAccess().getRule();
	}

	//ConstPropertyId:
	//	name=ID;
	public ConstPropertyIdElements getConstPropertyIdAccess() {
		return (pConstPropertyId != null) ? pConstPropertyId : (pConstPropertyId = new ConstPropertyIdElements());
	}
	
	public ParserRule getConstPropertyIdRule() {
		return getConstPropertyIdAccess().getRule();
	}

	//Struct:
	//	comment+=CommentType* attributes+=Attribute* "struct" "abstract"? name=ID ("extends" superType=[Struct])? "{"
	//	properties+=Property* "}";
	public StructElements getStructAccess() {
		return (pStruct != null) ? pStruct : (pStruct = new StructElements());
	}
	
	public ParserRule getStructRule() {
		return getStructAccess().getRule();
	}

	//Property:
	//	comment+=CommentType* attributes+=Attribute* (dateType=DataTypeReference | elementType=[ElementTypeReference])
	//	name=PropertyValue LineTerm?;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//PropertyValue:
	//	name=ID;
	public PropertyValueElements getPropertyValueAccess() {
		return (pPropertyValue != null) ? pPropertyValue : (pPropertyValue = new PropertyValueElements());
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//Service:
	//	comment+=CommentType* attributes+=Attribute* "service" name=ID "{" serviceMethods+=ServiceMethod* "}";
	public ServiceElements getServiceAccess() {
		return (pService != null) ? pService : (pService = new ServiceElements());
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//ServiceMethod:
	//	comment+=CommentType* attributes+=Attribute* return=ServiceMethodReturnType name=ID "(" properties+=ServiceProperty*
	//	")" LineTerm?;
	public ServiceMethodElements getServiceMethodAccess() {
		return (pServiceMethod != null) ? pServiceMethod : (pServiceMethod = new ServiceMethodElements());
	}
	
	public ParserRule getServiceMethodRule() {
		return getServiceMethodAccess().getRule();
	}

	//ServiceProperty:
	//	name=Property;
	public ServicePropertyElements getServicePropertyAccess() {
		return (pServiceProperty != null) ? pServiceProperty : (pServiceProperty = new ServicePropertyElements());
	}
	
	public ParserRule getServicePropertyRule() {
		return getServicePropertyAccess().getRule();
	}

	//ServiceMethodReturnType:
	//	voidType="void" | dataType=DataTypeReference | elementType=[ElementTypeReference];
	public ServiceMethodReturnTypeElements getServiceMethodReturnTypeAccess() {
		return (pServiceMethodReturnType != null) ? pServiceMethodReturnType : (pServiceMethodReturnType = new ServiceMethodReturnTypeElements());
	}
	
	public ParserRule getServiceMethodReturnTypeRule() {
		return getServiceMethodReturnTypeAccess().getRule();
	}

	//DataTypeReference:
	//	type=DataTypeEnum | ListType | MapType;
	public DataTypeReferenceElements getDataTypeReferenceAccess() {
		return (pDataTypeReference != null) ? pDataTypeReference : (pDataTypeReference = new DataTypeReferenceElements());
	}
	
	public ParserRule getDataTypeReferenceRule() {
		return getDataTypeReferenceAccess().getRule();
	}

	//ElementTypeReference:
	//	Struct | Enum;
	public ElementTypeReferenceElements getElementTypeReferenceAccess() {
		return (pElementTypeReference != null) ? pElementTypeReference : (pElementTypeReference = new ElementTypeReferenceElements());
	}
	
	public ParserRule getElementTypeReferenceRule() {
		return getElementTypeReferenceAccess().getRule();
	}

	//ListType:
	//	"list" "<" (dateType=DataTypeReference | elementType=[ElementTypeReference]) ">";
	public ListTypeElements getListTypeAccess() {
		return (pListType != null) ? pListType : (pListType = new ListTypeElements());
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}

	//MapType:
	//	"map" "<" (keyDataType=DataTypeReference | keyElementType=[ElementTypeReference]) "," (valDataType=DataTypeReference |
	//	valElementType=[ElementTypeReference]) ">";
	public MapTypeElements getMapTypeAccess() {
		return (pMapType != null) ? pMapType : (pMapType = new MapTypeElements());
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}

	//CommentType:
	//	SL_COMMENT | ML_COMMENT;
	public CommentTypeElements getCommentTypeAccess() {
		return (pCommentType != null) ? pCommentType : (pCommentType = new CommentTypeElements());
	}
	
	public ParserRule getCommentTypeRule() {
		return getCommentTypeAccess().getRule();
	}

	//Attribute:
	//	("@" scope=ID)? attr=ATTR;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//terminal ATTR:
	//	"["->"]";
	public TerminalRule getATTRRule() {
		return (tATTR != null) ? tATTR : (tATTR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATTR"));
	} 

	//enum DataTypeEnum:
	//	BOOL="bool" | BYTE="byte" | UNIT16="uint16" | UINT32="uint32" | UNIT64="uint64" | SBYTE="sbyte" | INT16="int16" |
	//	INT32="int32" | INT64="int64" | FLOAT32="float32" | FLOAT64="float64" | STRING="string" | DATETIME="datetime" |
	//	DECIMAL="decimal" | CHAR="char" | BINARY="binary";
	public DataTypeEnumElements getDataTypeEnumAccess() {
		return (unknownRuleDataTypeEnum != null) ? unknownRuleDataTypeEnum : (unknownRuleDataTypeEnum = new DataTypeEnumElements());
	}
	
	public EnumRule getDataTypeEnumRule() {
		return getDataTypeEnumAccess().getRule();
	}

	//enum SupportedLangs:
	//	JAVA="java" | CSHARP="csharp" | ASP="asp";
	public SupportedLangsElements getSupportedLangsAccess() {
		return (unknownRuleSupportedLangs != null) ? unknownRuleSupportedLangs : (unknownRuleSupportedLangs = new SupportedLangsElements());
	}
	
	public EnumRule getSupportedLangsRule() {
		return getSupportedLangsAccess().getRule();
	}

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
