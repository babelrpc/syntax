/*
* generated by Xtext
*/
package com.concur.babel.ui.quickfix;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.IPositionUpdater;
import org.eclipse.jface.text.Position;
import org.eclipse.xtext.ui.editor.XtextEditor;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.CompletionProposalBasedModification;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.ui.editor.quickfix.ReplaceModification;
import org.eclipse.xtext.ui.editor.utils.EditorUtils;
import org.eclipse.xtext.ui.refactoring.ui.IRenameElementContext;
import org.eclipse.xtext.ui.refactoring.ui.IRenameSupport;
import org.eclipse.xtext.validation.Issue;

import com.concur.babel.BabelIdlRuntimeModule;
import com.concur.babel.babelIdl.EnumPropertyId;
import com.concur.babel.validation.BabelIdlJavaValidator;

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
public class BabelIdlQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

	@Fix(BabelIdlJavaValidator.ENUM_PROP_UNIQUE)
	public void renameValue(final Issue issue, IssueResolutionAcceptor acceptor) {
		
//		acceptor.accept(issue, "Rename", "Rename Enum", null, new ReplaceModification(issue, "BBBB"));
//		acceptor.accept(
//			issue, 
//			"Rename", 
//			"Rename Enum", 
//			null, 
//			new CompletionProposalBasedModification(proposal));
		acceptor.accept(issue, "Rename", "Rename Enum", null, new ISemanticModification() {			
			public void apply(EObject element, IModificationContext context) throws Exception {

//				EnumPropertyId id = (EnumPropertyId)element;
//				id.setName("Craig");
				
			}
		});
		
//		acceptor.accept(issue, "Rename", "Rename Enum", null, new IModification() {
//			public void apply(IModificationContext context) throws BadLocationException {
//				IXtextDocument xtextDocument = context.getXtextDocument();
//				String name = xtextDocument.get(issue.getOffset(), issue.getLength());				
////				xtextDocument.replace(issue.getOffset(), issue.getLength(), name + "1");
//				ConfigurableCompletionProposal p = new ConfigurableCompletionProposal(
//					name,
//					issue.getOffset(),
//					issue.getLength(),
//					0);
////				xtextDocument.
////				xtextDocument.addPosition(new Position(issue.getOffset(), issue.getLength()));
//			}
//		});
		
	}
	
//	@Fix(MyJavaValidator.INVALID_NAME)
//	public void capitalizeName(final Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, "Capitalize name", "Capitalize the name.", "upcase.png", new IModification() {
//			public void apply(IModificationContext context) throws BadLocationException {
//				IXtextDocument xtextDocument = context.getXtextDocument();
//				String firstLetter = xtextDocument.get(issue.getOffset(), 1);
//				xtextDocument.replace(issue.getOffset(), 1, firstLetter.toUpperCase());
//			}
//		});
//	}

}
