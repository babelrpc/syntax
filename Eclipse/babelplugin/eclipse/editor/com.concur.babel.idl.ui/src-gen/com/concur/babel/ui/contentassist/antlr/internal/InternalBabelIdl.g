/*
* generated by Xtext
*/
grammar InternalBabelIdl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.concur.babel.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.concur.babel.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.concur.babel.services.BabelIdlGrammarAccess;

}

@parser::members {
 
 	private BabelIdlGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BabelIdlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleBabelIdl
entryRuleBabelIdl 
:
{ before(grammarAccess.getBabelIdlRule()); }
	 ruleBabelIdl
{ after(grammarAccess.getBabelIdlRule()); } 
	 EOF 
;

// Rule BabelIdl
ruleBabelIdl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBabelIdlAccess().getGroup()); }
(rule__BabelIdl__Group__0)
{ after(grammarAccess.getBabelIdlAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBabelDefinition
entryRuleBabelDefinition 
:
{ before(grammarAccess.getBabelDefinitionRule()); }
	 ruleBabelDefinition
{ after(grammarAccess.getBabelDefinitionRule()); } 
	 EOF 
;

// Rule BabelDefinition
ruleBabelDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBabelDefinitionAccess().getAlternatives()); }
(rule__BabelDefinition__Alternatives)
{ after(grammarAccess.getBabelDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLineTerm
entryRuleLineTerm 
:
{ before(grammarAccess.getLineTermRule()); }
	 ruleLineTerm
{ after(grammarAccess.getLineTermRule()); } 
	 EOF 
;

// Rule LineTerm
ruleLineTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLineTermAccess().getAlternatives()); }
(rule__LineTerm__Alternatives)
{ after(grammarAccess.getLineTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespace
entryRuleNamespace 
:
{ before(grammarAccess.getNamespaceRule()); }
	 ruleNamespace
{ after(grammarAccess.getNamespaceRule()); } 
	 EOF 
;

// Rule Namespace
ruleNamespace
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceAccess().getGroup()); }
(rule__Namespace__Group__0)
{ after(grammarAccess.getNamespaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefaultNameSpace
entryRuleDefaultNameSpace 
:
{ before(grammarAccess.getDefaultNameSpaceRule()); }
	 ruleDefaultNameSpace
{ after(grammarAccess.getDefaultNameSpaceRule()); } 
	 EOF 
;

// Rule DefaultNameSpace
ruleDefaultNameSpace
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefaultNameSpaceAccess().getGroup()); }
(rule__DefaultNameSpace__Group__0)
{ after(grammarAccess.getDefaultNameSpaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefaultQualifier
entryRuleDefaultQualifier 
:
{ before(grammarAccess.getDefaultQualifierRule()); }
	 ruleDefaultQualifier
{ after(grammarAccess.getDefaultQualifierRule()); } 
	 EOF 
;

// Rule DefaultQualifier
ruleDefaultQualifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefaultQualifierAccess().getGroup()); }
(rule__DefaultQualifier__Group__0)
{ after(grammarAccess.getDefaultQualifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportStatement
entryRuleImportStatement 
:
{ before(grammarAccess.getImportStatementRule()); }
	 ruleImportStatement
{ after(grammarAccess.getImportStatementRule()); } 
	 EOF 
;

// Rule ImportStatement
ruleImportStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportStatementAccess().getGroup()); }
(rule__ImportStatement__Group__0)
{ after(grammarAccess.getImportStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnum
entryRuleEnum 
:
{ before(grammarAccess.getEnumRule()); }
	 ruleEnum
{ after(grammarAccess.getEnumRule()); } 
	 EOF 
;

// Rule Enum
ruleEnum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumAccess().getGroup()); }
(rule__Enum__Group__0)
{ after(grammarAccess.getEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumProperty
entryRuleEnumProperty 
:
{ before(grammarAccess.getEnumPropertyRule()); }
	 ruleEnumProperty
{ after(grammarAccess.getEnumPropertyRule()); } 
	 EOF 
;

// Rule EnumProperty
ruleEnumProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumPropertyAccess().getGroup()); }
(rule__EnumProperty__Group__0)
{ after(grammarAccess.getEnumPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumOrdinal
entryRuleEnumOrdinal 
:
{ before(grammarAccess.getEnumOrdinalRule()); }
	 ruleEnumOrdinal
{ after(grammarAccess.getEnumOrdinalRule()); } 
	 EOF 
;

// Rule EnumOrdinal
ruleEnumOrdinal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumOrdinalAccess().getTypeAssignment()); }
(rule__EnumOrdinal__TypeAssignment)
{ after(grammarAccess.getEnumOrdinalAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumPropertyId
entryRuleEnumPropertyId 
:
{ before(grammarAccess.getEnumPropertyIdRule()); }
	 ruleEnumPropertyId
{ after(grammarAccess.getEnumPropertyIdRule()); } 
	 EOF 
;

// Rule EnumPropertyId
ruleEnumPropertyId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumPropertyIdAccess().getNameAssignment()); }
(rule__EnumPropertyId__NameAssignment)
{ after(grammarAccess.getEnumPropertyIdAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConst
entryRuleConst 
:
{ before(grammarAccess.getConstRule()); }
	 ruleConst
{ after(grammarAccess.getConstRule()); } 
	 EOF 
;

// Rule Const
ruleConst
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstAccess().getGroup()); }
(rule__Const__Group__0)
{ after(grammarAccess.getConstAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstProperty
entryRuleConstProperty 
:
{ before(grammarAccess.getConstPropertyRule()); }
	 ruleConstProperty
{ after(grammarAccess.getConstPropertyRule()); } 
	 EOF 
;

// Rule ConstProperty
ruleConstProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstPropertyAccess().getGroup()); }
(rule__ConstProperty__Group__0)
{ after(grammarAccess.getConstPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstValueType
entryRuleConstValueType 
:
{ before(grammarAccess.getConstValueTypeRule()); }
	 ruleConstValueType
{ after(grammarAccess.getConstValueTypeRule()); } 
	 EOF 
;

// Rule ConstValueType
ruleConstValueType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstValueTypeAccess().getAlternatives()); }
(rule__ConstValueType__Alternatives)
{ after(grammarAccess.getConstValueTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstNumValue
entryRuleConstNumValue 
:
{ before(grammarAccess.getConstNumValueRule()); }
	 ruleConstNumValue
{ after(grammarAccess.getConstNumValueRule()); } 
	 EOF 
;

// Rule ConstNumValue
ruleConstNumValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstNumValueAccess().getGroup()); }
(rule__ConstNumValue__Group__0)
{ after(grammarAccess.getConstNumValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstPropertyId
entryRuleConstPropertyId 
:
{ before(grammarAccess.getConstPropertyIdRule()); }
	 ruleConstPropertyId
{ after(grammarAccess.getConstPropertyIdRule()); } 
	 EOF 
;

// Rule ConstPropertyId
ruleConstPropertyId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstPropertyIdAccess().getNameAssignment()); }
(rule__ConstPropertyId__NameAssignment)
{ after(grammarAccess.getConstPropertyIdAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStruct
entryRuleStruct 
:
{ before(grammarAccess.getStructRule()); }
	 ruleStruct
{ after(grammarAccess.getStructRule()); } 
	 EOF 
;

// Rule Struct
ruleStruct
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructAccess().getGroup()); }
(rule__Struct__Group__0)
{ after(grammarAccess.getStructAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProperty
entryRuleProperty 
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyAccess().getGroup()); }
(rule__Property__Group__0)
{ after(grammarAccess.getPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyValue
entryRulePropertyValue 
:
{ before(grammarAccess.getPropertyValueRule()); }
	 rulePropertyValue
{ after(grammarAccess.getPropertyValueRule()); } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyValueAccess().getNameAssignment()); }
(rule__PropertyValue__NameAssignment)
{ after(grammarAccess.getPropertyValueAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleService
entryRuleService 
:
{ before(grammarAccess.getServiceRule()); }
	 ruleService
{ after(grammarAccess.getServiceRule()); } 
	 EOF 
;

// Rule Service
ruleService
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getServiceAccess().getGroup()); }
(rule__Service__Group__0)
{ after(grammarAccess.getServiceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleServiceMethod
entryRuleServiceMethod 
:
{ before(grammarAccess.getServiceMethodRule()); }
	 ruleServiceMethod
{ after(grammarAccess.getServiceMethodRule()); } 
	 EOF 
;

// Rule ServiceMethod
ruleServiceMethod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getServiceMethodAccess().getGroup()); }
(rule__ServiceMethod__Group__0)
{ after(grammarAccess.getServiceMethodAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleServiceProperty
entryRuleServiceProperty 
:
{ before(grammarAccess.getServicePropertyRule()); }
	 ruleServiceProperty
{ after(grammarAccess.getServicePropertyRule()); } 
	 EOF 
;

// Rule ServiceProperty
ruleServiceProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getServicePropertyAccess().getNameAssignment()); }
(rule__ServiceProperty__NameAssignment)
{ after(grammarAccess.getServicePropertyAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleServiceMethodReturnType
entryRuleServiceMethodReturnType 
:
{ before(grammarAccess.getServiceMethodReturnTypeRule()); }
	 ruleServiceMethodReturnType
{ after(grammarAccess.getServiceMethodReturnTypeRule()); } 
	 EOF 
;

// Rule ServiceMethodReturnType
ruleServiceMethodReturnType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getServiceMethodReturnTypeAccess().getAlternatives()); }
(rule__ServiceMethodReturnType__Alternatives)
{ after(grammarAccess.getServiceMethodReturnTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataTypeReference
entryRuleDataTypeReference 
:
{ before(grammarAccess.getDataTypeReferenceRule()); }
	 ruleDataTypeReference
{ after(grammarAccess.getDataTypeReferenceRule()); } 
	 EOF 
;

// Rule DataTypeReference
ruleDataTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeReferenceAccess().getAlternatives()); }
(rule__DataTypeReference__Alternatives)
{ after(grammarAccess.getDataTypeReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleListType
entryRuleListType 
:
{ before(grammarAccess.getListTypeRule()); }
	 ruleListType
{ after(grammarAccess.getListTypeRule()); } 
	 EOF 
;

// Rule ListType
ruleListType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListTypeAccess().getGroup()); }
(rule__ListType__Group__0)
{ after(grammarAccess.getListTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapType
entryRuleMapType 
:
{ before(grammarAccess.getMapTypeRule()); }
	 ruleMapType
{ after(grammarAccess.getMapTypeRule()); } 
	 EOF 
;

// Rule MapType
ruleMapType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapTypeAccess().getGroup()); }
(rule__MapType__Group__0)
{ after(grammarAccess.getMapTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommentType
entryRuleCommentType 
:
{ before(grammarAccess.getCommentTypeRule()); }
	 ruleCommentType
{ after(grammarAccess.getCommentTypeRule()); } 
	 EOF 
;

// Rule CommentType
ruleCommentType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentTypeAccess().getAlternatives()); }
(rule__CommentType__Alternatives)
{ after(grammarAccess.getCommentTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule DataTypeEnum
ruleDataTypeEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeEnumAccess().getAlternatives()); }
(rule__DataTypeEnum__Alternatives)
{ after(grammarAccess.getDataTypeEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SupportedLangs
ruleSupportedLangs
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSupportedLangsAccess().getAlternatives()); }
(rule__SupportedLangs__Alternatives)
{ after(grammarAccess.getSupportedLangsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BabelDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelDefinitionAccess().getEnumParserRuleCall_0()); }
	ruleEnum
{ after(grammarAccess.getBabelDefinitionAccess().getEnumParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBabelDefinitionAccess().getStructParserRuleCall_1()); }
	ruleStruct
{ after(grammarAccess.getBabelDefinitionAccess().getStructParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBabelDefinitionAccess().getConstParserRuleCall_2()); }
	ruleConst
{ after(grammarAccess.getBabelDefinitionAccess().getConstParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBabelDefinitionAccess().getServiceParserRuleCall_3()); }
	ruleService
{ after(grammarAccess.getBabelDefinitionAccess().getServiceParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LineTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineTermAccess().getCommaKeyword_0()); }

	',' 

{ after(grammarAccess.getLineTermAccess().getCommaKeyword_0()); }
)

    |(
{ before(grammarAccess.getLineTermAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getLineTermAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstValueType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstValueTypeAccess().getStringValAssignment_0()); }
(rule__ConstValueType__StringValAssignment_0)
{ after(grammarAccess.getConstValueTypeAccess().getStringValAssignment_0()); }
)

    |(
{ before(grammarAccess.getConstValueTypeAccess().getBoolValAssignment_1()); }
(rule__ConstValueType__BoolValAssignment_1)
{ after(grammarAccess.getConstValueTypeAccess().getBoolValAssignment_1()); }
)

    |(
{ before(grammarAccess.getConstValueTypeAccess().getNumValAssignment_2()); }
(rule__ConstValueType__NumValAssignment_2)
{ after(grammarAccess.getConstValueTypeAccess().getNumValAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getDateTypeAssignment_2_0()); }
(rule__Property__DateTypeAssignment_2_0)
{ after(grammarAccess.getPropertyAccess().getDateTypeAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getPropertyAccess().getElementTypeAssignment_2_1()); }
(rule__Property__ElementTypeAssignment_2_1)
{ after(grammarAccess.getPropertyAccess().getElementTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethodReturnType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodReturnTypeAccess().getVoidTypeAssignment_0()); }
(rule__ServiceMethodReturnType__VoidTypeAssignment_0)
{ after(grammarAccess.getServiceMethodReturnTypeAccess().getVoidTypeAssignment_0()); }
)

    |(
{ before(grammarAccess.getServiceMethodReturnTypeAccess().getDataTypeAssignment_1()); }
(rule__ServiceMethodReturnType__DataTypeAssignment_1)
{ after(grammarAccess.getServiceMethodReturnTypeAccess().getDataTypeAssignment_1()); }
)

    |(
{ before(grammarAccess.getServiceMethodReturnTypeAccess().getElementTypeAssignment_2()); }
(rule__ServiceMethodReturnType__ElementTypeAssignment_2)
{ after(grammarAccess.getServiceMethodReturnTypeAccess().getElementTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeReference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeReferenceAccess().getTypeAssignment_0()); }
(rule__DataTypeReference__TypeAssignment_0)
{ after(grammarAccess.getDataTypeReferenceAccess().getTypeAssignment_0()); }
)

    |(
{ before(grammarAccess.getDataTypeReferenceAccess().getListTypeParserRuleCall_1()); }
	ruleListType
{ after(grammarAccess.getDataTypeReferenceAccess().getListTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDataTypeReferenceAccess().getMapTypeParserRuleCall_2()); }
	ruleMapType
{ after(grammarAccess.getDataTypeReferenceAccess().getMapTypeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getDateTypeAssignment_2_0()); }
(rule__ListType__DateTypeAssignment_2_0)
{ after(grammarAccess.getListTypeAccess().getDateTypeAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getListTypeAccess().getElementTypeAssignment_2_1()); }
(rule__ListType__ElementTypeAssignment_2_1)
{ after(grammarAccess.getListTypeAccess().getElementTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getKeyDataTypeAssignment_2_0()); }
(rule__MapType__KeyDataTypeAssignment_2_0)
{ after(grammarAccess.getMapTypeAccess().getKeyDataTypeAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getMapTypeAccess().getKeyElementTypeAssignment_2_1()); }
(rule__MapType__KeyElementTypeAssignment_2_1)
{ after(grammarAccess.getMapTypeAccess().getKeyElementTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getValDataTypeAssignment_4_0()); }
(rule__MapType__ValDataTypeAssignment_4_0)
{ after(grammarAccess.getMapTypeAccess().getValDataTypeAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getMapTypeAccess().getValElementTypeAssignment_4_1()); }
(rule__MapType__ValElementTypeAssignment_4_1)
{ after(grammarAccess.getMapTypeAccess().getValElementTypeAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommentType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentTypeAccess().getSL_COMMENTTerminalRuleCall_0()); }
	RULE_SL_COMMENT
{ after(grammarAccess.getCommentTypeAccess().getSL_COMMENTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommentTypeAccess().getML_COMMENTTerminalRuleCall_1()); }
	RULE_ML_COMMENT
{ after(grammarAccess.getCommentTypeAccess().getML_COMMENTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeEnumAccess().getBOOLEnumLiteralDeclaration_0()); }
(	'bool' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getBOOLEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getBYTEEnumLiteralDeclaration_1()); }
(	'byte' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getBYTEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getUNIT16EnumLiteralDeclaration_2()); }
(	'uint16' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getUNIT16EnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getUINT32EnumLiteralDeclaration_3()); }
(	'uint32' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getUINT32EnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getUNIT64EnumLiteralDeclaration_4()); }
(	'uint64' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getUNIT64EnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getSBYTEEnumLiteralDeclaration_5()); }
(	'sbyte' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getSBYTEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getINT16EnumLiteralDeclaration_6()); }
(	'int16' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getINT16EnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getINT32EnumLiteralDeclaration_7()); }
(	'int32' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getINT32EnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getINT64EnumLiteralDeclaration_8()); }
(	'int64' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getINT64EnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getFLOAT32EnumLiteralDeclaration_9()); }
(	'float32' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getFLOAT32EnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getFLOAT64EnumLiteralDeclaration_10()); }
(	'float64' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getFLOAT64EnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getSTRINGEnumLiteralDeclaration_11()); }
(	'string' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getSTRINGEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getDATETIMEEnumLiteralDeclaration_12()); }
(	'datetime' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getDATETIMEEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getDECIMALEnumLiteralDeclaration_13()); }
(	'decimal' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getDECIMALEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getCHAREnumLiteralDeclaration_14()); }
(	'char' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getCHAREnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getDataTypeEnumAccess().getBINARYEnumLiteralDeclaration_15()); }
(	'binary' 
)
{ after(grammarAccess.getDataTypeEnumAccess().getBINARYEnumLiteralDeclaration_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SupportedLangs__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSupportedLangsAccess().getJAVAEnumLiteralDeclaration_0()); }
(	'java' 
)
{ after(grammarAccess.getSupportedLangsAccess().getJAVAEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSupportedLangsAccess().getCSHARPEnumLiteralDeclaration_1()); }
(	'csharp' 
)
{ after(grammarAccess.getSupportedLangsAccess().getCSHARPEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getSupportedLangsAccess().getASPEnumLiteralDeclaration_2()); }
(	'asp' 
)
{ after(grammarAccess.getSupportedLangsAccess().getASPEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BabelIdl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BabelIdl__Group__0__Impl
	rule__BabelIdl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BabelIdl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getCommentAssignment_0()); }
(rule__BabelIdl__CommentAssignment_0)*
{ after(grammarAccess.getBabelIdlAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BabelIdl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BabelIdl__Group__1__Impl
	rule__BabelIdl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BabelIdl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getImportsAssignment_1()); }
(rule__BabelIdl__ImportsAssignment_1)*
{ after(grammarAccess.getBabelIdlAccess().getImportsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BabelIdl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BabelIdl__Group__2__Impl
	rule__BabelIdl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BabelIdl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getDefaultNamespaceAssignment_2()); }
(rule__BabelIdl__DefaultNamespaceAssignment_2)
{ after(grammarAccess.getBabelIdlAccess().getDefaultNamespaceAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BabelIdl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BabelIdl__Group__3__Impl
	rule__BabelIdl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BabelIdl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getNamespacesAssignment_3()); }
(rule__BabelIdl__NamespacesAssignment_3)*
{ after(grammarAccess.getBabelIdlAccess().getNamespacesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BabelIdl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BabelIdl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BabelIdl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getDefinitionsAssignment_4()); }
(rule__BabelIdl__DefinitionsAssignment_4)*
{ after(grammarAccess.getBabelIdlAccess().getDefinitionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Namespace__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Namespace__Group__0__Impl
	rule__Namespace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAccess().getNamespaceKeyword_0()); }

	'namespace' 

{ after(grammarAccess.getNamespaceAccess().getNamespaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Namespace__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Namespace__Group__1__Impl
	rule__Namespace__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAccess().getLangAssignment_1()); }
(rule__Namespace__LangAssignment_1)
{ after(grammarAccess.getNamespaceAccess().getLangAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Namespace__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Namespace__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAccess().getNsAssignment_2()); }
(rule__Namespace__NsAssignment_2)
{ after(grammarAccess.getNamespaceAccess().getNsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DefaultNameSpace__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultNameSpace__Group__0__Impl
	rule__DefaultNameSpace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultNameSpace__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultNameSpaceAccess().getNamespaceKeyword_0()); }

	'namespace' 

{ after(grammarAccess.getDefaultNameSpaceAccess().getNamespaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultNameSpace__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultNameSpace__Group__1__Impl
	rule__DefaultNameSpace__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultNameSpace__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultNameSpaceAccess().getDefAssignment_1()); }
(rule__DefaultNameSpace__DefAssignment_1)
{ after(grammarAccess.getDefaultNameSpaceAccess().getDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultNameSpace__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultNameSpace__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultNameSpace__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultNameSpaceAccess().getNsAssignment_2()); }
(rule__DefaultNameSpace__NsAssignment_2)
{ after(grammarAccess.getDefaultNameSpaceAccess().getNsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DefaultQualifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultQualifier__Group__0__Impl
	rule__DefaultQualifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultQualifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultQualifierAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getDefaultQualifierAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultQualifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultQualifier__Group__1__Impl
	rule__DefaultQualifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultQualifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultQualifierAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getDefaultQualifierAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultQualifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultQualifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultQualifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultQualifierAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
{ after(grammarAccess.getDefaultQualifierAccess().getIDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getSolidusKeyword_0()); }

	'/' 

{ after(grammarAccess.getQualifiedNameAccess().getSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImportStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportStatement__Group__0__Impl
	rule__ImportStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportStatementAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportStatementAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportStatementAccess().getImportURIAssignment_1()); }
(rule__ImportStatement__ImportURIAssignment_1)
{ after(grammarAccess.getImportStatementAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Enum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__0__Impl
	rule__Enum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getCommentAssignment_0()); }
(rule__Enum__CommentAssignment_0)*
{ after(grammarAccess.getEnumAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__1__Impl
	rule__Enum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getEnumKeyword_1()); }

	'enum' 

{ after(grammarAccess.getEnumAccess().getEnumKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__2__Impl
	rule__Enum__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getNameAssignment_2()); }
(rule__Enum__NameAssignment_2)
{ after(grammarAccess.getEnumAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__3__Impl
	rule__Enum__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__4__Impl
	rule__Enum__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getPropertiesAssignment_4()); }
(rule__Enum__PropertiesAssignment_4)*
{ after(grammarAccess.getEnumAccess().getPropertiesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__EnumProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumProperty__Group__0__Impl
	rule__EnumProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumPropertyAccess().getCommentAssignment_0()); }
(rule__EnumProperty__CommentAssignment_0)*
{ after(grammarAccess.getEnumPropertyAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumProperty__Group__1__Impl
	rule__EnumProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumPropertyAccess().getNameAssignment_1()); }
(rule__EnumProperty__NameAssignment_1)
{ after(grammarAccess.getEnumPropertyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumProperty__Group__2__Impl
	rule__EnumProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumPropertyAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getEnumPropertyAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumProperty__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumProperty__Group__3__Impl
	rule__EnumProperty__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumProperty__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumPropertyAccess().getTypeAssignment_3()); }
(rule__EnumProperty__TypeAssignment_3)
{ after(grammarAccess.getEnumPropertyAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumProperty__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumProperty__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumProperty__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumPropertyAccess().getLineTermParserRuleCall_4()); }
(	ruleLineTerm)?
{ after(grammarAccess.getEnumPropertyAccess().getLineTermParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Const__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Const__Group__0__Impl
	rule__Const__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstAccess().getCommentAssignment_0()); }
(rule__Const__CommentAssignment_0)*
{ after(grammarAccess.getConstAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Const__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Const__Group__1__Impl
	rule__Const__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstAccess().getConstKeyword_1()); }

	'const' 

{ after(grammarAccess.getConstAccess().getConstKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Const__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Const__Group__2__Impl
	rule__Const__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstAccess().getNameAssignment_2()); }
(rule__Const__NameAssignment_2)
{ after(grammarAccess.getConstAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Const__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Const__Group__3__Impl
	rule__Const__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getConstAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Const__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Const__Group__4__Impl
	rule__Const__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstAccess().getPropertiesAssignment_4()); }
(rule__Const__PropertiesAssignment_4)*
{ after(grammarAccess.getConstAccess().getPropertiesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Const__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Const__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getConstAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ConstProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstProperty__Group__0__Impl
	rule__ConstProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstPropertyAccess().getCommentAssignment_0()); }
(rule__ConstProperty__CommentAssignment_0)*
{ after(grammarAccess.getConstPropertyAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstProperty__Group__1__Impl
	rule__ConstProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstPropertyAccess().getNameAssignment_1()); }
(rule__ConstProperty__NameAssignment_1)
{ after(grammarAccess.getConstPropertyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstProperty__Group__2__Impl
	rule__ConstProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstPropertyAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getConstPropertyAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstProperty__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstProperty__Group__3__Impl
	rule__ConstProperty__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstProperty__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstPropertyAccess().getValAssignment_3()); }
(rule__ConstProperty__ValAssignment_3)
{ after(grammarAccess.getConstPropertyAccess().getValAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstProperty__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstProperty__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstProperty__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstPropertyAccess().getLineTermParserRuleCall_4()); }
(	ruleLineTerm)?
{ after(grammarAccess.getConstPropertyAccess().getLineTermParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConstNumValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstNumValue__Group__0__Impl
	rule__ConstNumValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstNumValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstNumValueAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getConstNumValueAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstNumValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstNumValue__Group__1__Impl
	rule__ConstNumValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstNumValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstNumValueAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getConstNumValueAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstNumValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstNumValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstNumValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstNumValueAccess().getGroup_2()); }
(rule__ConstNumValue__Group_2__0)?
{ after(grammarAccess.getConstNumValueAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConstNumValue__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstNumValue__Group_2__0__Impl
	rule__ConstNumValue__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstNumValue__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstNumValueAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getConstNumValueAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstNumValue__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstNumValue__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstNumValue__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstNumValueAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
{ after(grammarAccess.getConstNumValueAccess().getINTTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Struct__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group__0__Impl
	rule__Struct__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getCommentAssignment_0()); }
(rule__Struct__CommentAssignment_0)*
{ after(grammarAccess.getStructAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group__1__Impl
	rule__Struct__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getAttributesAssignment_1()); }
(rule__Struct__AttributesAssignment_1)*
{ after(grammarAccess.getStructAccess().getAttributesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group__2__Impl
	rule__Struct__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getStructKeyword_2()); }

	'struct' 

{ after(grammarAccess.getStructAccess().getStructKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group__3__Impl
	rule__Struct__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getAbstractKeyword_3()); }
(
	'abstract' 
)?
{ after(grammarAccess.getStructAccess().getAbstractKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group__4__Impl
	rule__Struct__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getNameAssignment_4()); }
(rule__Struct__NameAssignment_4)
{ after(grammarAccess.getStructAccess().getNameAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group__5__Impl
	rule__Struct__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getGroup_5()); }
(rule__Struct__Group_5__0)?
{ after(grammarAccess.getStructAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group__6__Impl
	rule__Struct__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getLeftCurlyBracketKeyword_6()); }

	'{' 

{ after(grammarAccess.getStructAccess().getLeftCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group__7__Impl
	rule__Struct__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getPropertiesAssignment_7()); }
(rule__Struct__PropertiesAssignment_7)*
{ after(grammarAccess.getStructAccess().getPropertiesAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getStructAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Struct__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group_5__0__Impl
	rule__Struct__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getExtendsKeyword_5_0()); }

	'extends' 

{ after(grammarAccess.getStructAccess().getExtendsKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Struct__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getSuperTypeAssignment_5_1()); }
(rule__Struct__SuperTypeAssignment_5_1)
{ after(grammarAccess.getStructAccess().getSuperTypeAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Property__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getCommentAssignment_0()); }
(rule__Property__CommentAssignment_0)*
{ after(grammarAccess.getPropertyAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__1__Impl
	rule__Property__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getAttributesAssignment_1()); }
(rule__Property__AttributesAssignment_1)*
{ after(grammarAccess.getPropertyAccess().getAttributesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__2__Impl
	rule__Property__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getAlternatives_2()); }
(rule__Property__Alternatives_2)
{ after(grammarAccess.getPropertyAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__3__Impl
	rule__Property__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getNameAssignment_3()); }
(rule__Property__NameAssignment_3)
{ after(grammarAccess.getPropertyAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getLineTermParserRuleCall_4()); }
(	ruleLineTerm)?
{ after(grammarAccess.getPropertyAccess().getLineTermParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Service__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Service__Group__0__Impl
	rule__Service__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Service__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getCommentAssignment_0()); }
(rule__Service__CommentAssignment_0)*
{ after(grammarAccess.getServiceAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Service__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Service__Group__1__Impl
	rule__Service__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Service__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getAttributesAssignment_1()); }
(rule__Service__AttributesAssignment_1)*
{ after(grammarAccess.getServiceAccess().getAttributesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Service__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Service__Group__2__Impl
	rule__Service__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Service__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getServiceKeyword_2()); }

	'service' 

{ after(grammarAccess.getServiceAccess().getServiceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Service__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Service__Group__3__Impl
	rule__Service__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Service__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getNameAssignment_3()); }
(rule__Service__NameAssignment_3)
{ after(grammarAccess.getServiceAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Service__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Service__Group__4__Impl
	rule__Service__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Service__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Service__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Service__Group__5__Impl
	rule__Service__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Service__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getServiceMethodsAssignment_5()); }
(rule__Service__ServiceMethodsAssignment_5)*
{ after(grammarAccess.getServiceAccess().getServiceMethodsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Service__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Service__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Service__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ServiceMethod__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ServiceMethod__Group__0__Impl
	rule__ServiceMethod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getCommentAssignment_0()); }
(rule__ServiceMethod__CommentAssignment_0)*
{ after(grammarAccess.getServiceMethodAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ServiceMethod__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ServiceMethod__Group__1__Impl
	rule__ServiceMethod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getAttributesAssignment_1()); }
(rule__ServiceMethod__AttributesAssignment_1)*
{ after(grammarAccess.getServiceMethodAccess().getAttributesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ServiceMethod__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ServiceMethod__Group__2__Impl
	rule__ServiceMethod__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getReturnAssignment_2()); }
(rule__ServiceMethod__ReturnAssignment_2)
{ after(grammarAccess.getServiceMethodAccess().getReturnAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ServiceMethod__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ServiceMethod__Group__3__Impl
	rule__ServiceMethod__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getNameAssignment_3()); }
(rule__ServiceMethod__NameAssignment_3)
{ after(grammarAccess.getServiceMethodAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ServiceMethod__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ServiceMethod__Group__4__Impl
	rule__ServiceMethod__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getLeftParenthesisKeyword_4()); }

	'(' 

{ after(grammarAccess.getServiceMethodAccess().getLeftParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ServiceMethod__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ServiceMethod__Group__5__Impl
	rule__ServiceMethod__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getPropertiesAssignment_5()); }
(rule__ServiceMethod__PropertiesAssignment_5)*
{ after(grammarAccess.getServiceMethodAccess().getPropertiesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ServiceMethod__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ServiceMethod__Group__6__Impl
	rule__ServiceMethod__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getServiceMethodAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ServiceMethod__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ServiceMethod__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getLineTermParserRuleCall_7()); }
(	ruleLineTerm)?
{ after(grammarAccess.getServiceMethodAccess().getLineTermParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ListType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__0__Impl
	rule__ListType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getListKeyword_0()); }

	'list' 

{ after(grammarAccess.getListTypeAccess().getListKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__1__Impl
	rule__ListType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getListTypeAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__2__Impl
	rule__ListType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getAlternatives_2()); }
(rule__ListType__Alternatives_2)
{ after(grammarAccess.getListTypeAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getListTypeAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MapType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__0__Impl
	rule__MapType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getMapKeyword_0()); }

	'map' 

{ after(grammarAccess.getMapTypeAccess().getMapKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__1__Impl
	rule__MapType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getMapTypeAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__2__Impl
	rule__MapType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getAlternatives_2()); }
(rule__MapType__Alternatives_2)
{ after(grammarAccess.getMapTypeAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__3__Impl
	rule__MapType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getMapTypeAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__4__Impl
	rule__MapType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getAlternatives_4()); }
(rule__MapType__Alternatives_4)
{ after(grammarAccess.getMapTypeAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getGreaterThanSignKeyword_5()); }

	'>' 

{ after(grammarAccess.getMapTypeAccess().getGreaterThanSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getGroup_0()); }
(rule__Attribute__Group_0__0)?
{ after(grammarAccess.getAttributeAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAttrAssignment_1()); }
(rule__Attribute__AttrAssignment_1)
{ after(grammarAccess.getAttributeAccess().getAttrAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attribute__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_0__0__Impl
	rule__Attribute__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getCommercialAtKeyword_0_0()); }

	'@' 

{ after(grammarAccess.getAttributeAccess().getCommercialAtKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getScopeAssignment_0_1()); }
(rule__Attribute__ScopeAssignment_0_1)
{ after(grammarAccess.getAttributeAccess().getScopeAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__BabelIdl__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getCommentCommentTypeParserRuleCall_0_0()); }
	ruleCommentType{ after(grammarAccess.getBabelIdlAccess().getCommentCommentTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BabelIdl__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getImportsImportStatementParserRuleCall_1_0()); }
	ruleImportStatement{ after(grammarAccess.getBabelIdlAccess().getImportsImportStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BabelIdl__DefaultNamespaceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getDefaultNamespaceDefaultNameSpaceParserRuleCall_2_0()); }
	ruleDefaultNameSpace{ after(grammarAccess.getBabelIdlAccess().getDefaultNamespaceDefaultNameSpaceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BabelIdl__NamespacesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getNamespacesNamespaceParserRuleCall_3_0()); }
	ruleNamespace{ after(grammarAccess.getBabelIdlAccess().getNamespacesNamespaceParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BabelIdl__DefinitionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBabelIdlAccess().getDefinitionsBabelDefinitionParserRuleCall_4_0()); }
	ruleBabelDefinition{ after(grammarAccess.getBabelIdlAccess().getDefinitionsBabelDefinitionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__LangAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAccess().getLangSupportedLangsEnumRuleCall_1_0()); }
	ruleSupportedLangs{ after(grammarAccess.getNamespaceAccess().getLangSupportedLangsEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__NsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAccess().getNsSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getNamespaceAccess().getNsSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultNameSpace__DefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultNameSpaceAccess().getDefDefaultQualifierParserRuleCall_1_0()); }
	ruleDefaultQualifier{ after(grammarAccess.getDefaultNameSpaceAccess().getDefDefaultQualifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultNameSpace__NsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultNameSpaceAccess().getNsQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getDefaultNameSpaceAccess().getNsQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportStatementAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportStatementAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getCommentCommentTypeParserRuleCall_0_0()); }
	ruleCommentType{ after(grammarAccess.getEnumAccess().getCommentCommentTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__PropertiesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getPropertiesEnumPropertyParserRuleCall_4_0()); }
	ruleEnumProperty{ after(grammarAccess.getEnumAccess().getPropertiesEnumPropertyParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumProperty__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumPropertyAccess().getCommentCommentTypeParserRuleCall_0_0()); }
	ruleCommentType{ after(grammarAccess.getEnumPropertyAccess().getCommentCommentTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumProperty__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumPropertyAccess().getNameEnumPropertyIdParserRuleCall_1_0()); }
	ruleEnumPropertyId{ after(grammarAccess.getEnumPropertyAccess().getNameEnumPropertyIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumProperty__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumPropertyAccess().getTypeEnumOrdinalParserRuleCall_3_0()); }
	ruleEnumOrdinal{ after(grammarAccess.getEnumPropertyAccess().getTypeEnumOrdinalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumOrdinal__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumOrdinalAccess().getTypeINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getEnumOrdinalAccess().getTypeINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumPropertyId__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumPropertyIdAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getEnumPropertyIdAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Const__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstAccess().getCommentCommentTypeParserRuleCall_0_0()); }
	ruleCommentType{ after(grammarAccess.getConstAccess().getCommentCommentTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Const__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getConstAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Const__PropertiesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstAccess().getPropertiesConstPropertyParserRuleCall_4_0()); }
	ruleConstProperty{ after(grammarAccess.getConstAccess().getPropertiesConstPropertyParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstProperty__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstPropertyAccess().getCommentCommentTypeParserRuleCall_0_0()); }
	ruleCommentType{ after(grammarAccess.getConstPropertyAccess().getCommentCommentTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstProperty__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstPropertyAccess().getNameConstPropertyIdParserRuleCall_1_0()); }
	ruleConstPropertyId{ after(grammarAccess.getConstPropertyAccess().getNameConstPropertyIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstProperty__ValAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstPropertyAccess().getValConstValueTypeParserRuleCall_3_0()); }
	ruleConstValueType{ after(grammarAccess.getConstPropertyAccess().getValConstValueTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstValueType__StringValAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstValueTypeAccess().getStringValSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getConstValueTypeAccess().getStringValSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstValueType__BoolValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstValueTypeAccess().getBoolValBOOLTerminalRuleCall_1_0()); }
	RULE_BOOL{ after(grammarAccess.getConstValueTypeAccess().getBoolValBOOLTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstValueType__NumValAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstValueTypeAccess().getNumValConstNumValueParserRuleCall_2_0()); }
	ruleConstNumValue{ after(grammarAccess.getConstValueTypeAccess().getNumValConstNumValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstPropertyId__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstPropertyIdAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getConstPropertyIdAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getCommentCommentTypeParserRuleCall_0_0()); }
	ruleCommentType{ after(grammarAccess.getStructAccess().getCommentCommentTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getAttributesAttributeParserRuleCall_1_0()); }
	ruleAttribute{ after(grammarAccess.getStructAccess().getAttributesAttributeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__NameAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getNameIDTerminalRuleCall_4_0()); }
	RULE_ID{ after(grammarAccess.getStructAccess().getNameIDTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__SuperTypeAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getSuperTypeStructCrossReference_5_1_0()); }
(
{ before(grammarAccess.getStructAccess().getSuperTypeStructIDTerminalRuleCall_5_1_0_1()); }
	RULE_ID{ after(grammarAccess.getStructAccess().getSuperTypeStructIDTerminalRuleCall_5_1_0_1()); }
)
{ after(grammarAccess.getStructAccess().getSuperTypeStructCrossReference_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__PropertiesAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructAccess().getPropertiesPropertyParserRuleCall_7_0()); }
	ruleProperty{ after(grammarAccess.getStructAccess().getPropertiesPropertyParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getCommentCommentTypeParserRuleCall_0_0()); }
	ruleCommentType{ after(grammarAccess.getPropertyAccess().getCommentCommentTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getAttributesAttributeParserRuleCall_1_0()); }
	ruleAttribute{ after(grammarAccess.getPropertyAccess().getAttributesAttributeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__DateTypeAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getDateTypeDataTypeReferenceParserRuleCall_2_0_0()); }
	ruleDataTypeReference{ after(grammarAccess.getPropertyAccess().getDateTypeDataTypeReferenceParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__ElementTypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getElementTypeElementTypeReferenceCrossReference_2_1_0()); }
(
{ before(grammarAccess.getPropertyAccess().getElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPropertyAccess().getElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getPropertyAccess().getElementTypeElementTypeReferenceCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getNamePropertyValueParserRuleCall_3_0()); }
	rulePropertyValue{ after(grammarAccess.getPropertyAccess().getNamePropertyValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValue__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getPropertyValueAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Service__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getCommentCommentTypeParserRuleCall_0_0()); }
	ruleCommentType{ after(grammarAccess.getServiceAccess().getCommentCommentTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Service__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getAttributesAttributeParserRuleCall_1_0()); }
	ruleAttribute{ after(grammarAccess.getServiceAccess().getAttributesAttributeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Service__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getServiceAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Service__ServiceMethodsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceAccess().getServiceMethodsServiceMethodParserRuleCall_5_0()); }
	ruleServiceMethod{ after(grammarAccess.getServiceAccess().getServiceMethodsServiceMethodParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getCommentCommentTypeParserRuleCall_0_0()); }
	ruleCommentType{ after(grammarAccess.getServiceMethodAccess().getCommentCommentTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getAttributesAttributeParserRuleCall_1_0()); }
	ruleAttribute{ after(grammarAccess.getServiceMethodAccess().getAttributesAttributeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__ReturnAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getReturnServiceMethodReturnTypeParserRuleCall_2_0()); }
	ruleServiceMethodReturnType{ after(grammarAccess.getServiceMethodAccess().getReturnServiceMethodReturnTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getServiceMethodAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethod__PropertiesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodAccess().getPropertiesServicePropertyParserRuleCall_5_0()); }
	ruleServiceProperty{ after(grammarAccess.getServiceMethodAccess().getPropertiesServicePropertyParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceProperty__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServicePropertyAccess().getNamePropertyParserRuleCall_0()); }
	ruleProperty{ after(grammarAccess.getServicePropertyAccess().getNamePropertyParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethodReturnType__VoidTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodReturnTypeAccess().getVoidTypeVoidKeyword_0_0()); }
(
{ before(grammarAccess.getServiceMethodReturnTypeAccess().getVoidTypeVoidKeyword_0_0()); }

	'void' 

{ after(grammarAccess.getServiceMethodReturnTypeAccess().getVoidTypeVoidKeyword_0_0()); }
)

{ after(grammarAccess.getServiceMethodReturnTypeAccess().getVoidTypeVoidKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethodReturnType__DataTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodReturnTypeAccess().getDataTypeDataTypeReferenceParserRuleCall_1_0()); }
	ruleDataTypeReference{ after(grammarAccess.getServiceMethodReturnTypeAccess().getDataTypeDataTypeReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceMethodReturnType__ElementTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getServiceMethodReturnTypeAccess().getElementTypeElementTypeReferenceCrossReference_2_0()); }
(
{ before(grammarAccess.getServiceMethodReturnTypeAccess().getElementTypeElementTypeReferenceIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getServiceMethodReturnTypeAccess().getElementTypeElementTypeReferenceIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getServiceMethodReturnTypeAccess().getElementTypeElementTypeReferenceCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeReference__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeReferenceAccess().getTypeDataTypeEnumEnumRuleCall_0_0()); }
	ruleDataTypeEnum{ after(grammarAccess.getDataTypeReferenceAccess().getTypeDataTypeEnumEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__DateTypeAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getDateTypeDataTypeReferenceParserRuleCall_2_0_0()); }
	ruleDataTypeReference{ after(grammarAccess.getListTypeAccess().getDateTypeDataTypeReferenceParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListType__ElementTypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListTypeAccess().getElementTypeElementTypeReferenceCrossReference_2_1_0()); }
(
{ before(grammarAccess.getListTypeAccess().getElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getListTypeAccess().getElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getListTypeAccess().getElementTypeElementTypeReferenceCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__KeyDataTypeAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getKeyDataTypeDataTypeReferenceParserRuleCall_2_0_0()); }
	ruleDataTypeReference{ after(grammarAccess.getMapTypeAccess().getKeyDataTypeDataTypeReferenceParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__KeyElementTypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getKeyElementTypeElementTypeReferenceCrossReference_2_1_0()); }
(
{ before(grammarAccess.getMapTypeAccess().getKeyElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getMapTypeAccess().getKeyElementTypeElementTypeReferenceIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getMapTypeAccess().getKeyElementTypeElementTypeReferenceCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__ValDataTypeAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getValDataTypeDataTypeReferenceParserRuleCall_4_0_0()); }
	ruleDataTypeReference{ after(grammarAccess.getMapTypeAccess().getValDataTypeDataTypeReferenceParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__ValElementTypeAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getValElementTypeElementTypeReferenceCrossReference_4_1_0()); }
(
{ before(grammarAccess.getMapTypeAccess().getValElementTypeElementTypeReferenceIDTerminalRuleCall_4_1_0_1()); }
	RULE_ID{ after(grammarAccess.getMapTypeAccess().getValElementTypeElementTypeReferenceIDTerminalRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getMapTypeAccess().getValElementTypeElementTypeReferenceCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ScopeAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getScopeIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getScopeIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__AttrAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAttrATTRTerminalRuleCall_1_0()); }
	RULE_ATTR{ after(grammarAccess.getAttributeAccess().getAttrATTRTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ATTR : '[' ( options {greedy=false;} : . )*']';

RULE_BOOL : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


