/*
* generated by Xtext
*/
package com.concur.babel.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.concur.babel.services.BabelIdlGrammarAccess;

public class BabelIdlParser extends AbstractContentAssistParser {
	
	@Inject
	private BabelIdlGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.concur.babel.ui.contentassist.antlr.internal.InternalBabelIdlParser createParser() {
		com.concur.babel.ui.contentassist.antlr.internal.InternalBabelIdlParser result = new com.concur.babel.ui.contentassist.antlr.internal.InternalBabelIdlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBabelDefinitionAccess().getAlternatives(), "rule__BabelDefinition__Alternatives");
					put(grammarAccess.getLineTermAccess().getAlternatives(), "rule__LineTerm__Alternatives");
					put(grammarAccess.getConstValueTypeAccess().getAlternatives(), "rule__ConstValueType__Alternatives");
					put(grammarAccess.getPropertyAccess().getAlternatives_2(), "rule__Property__Alternatives_2");
					put(grammarAccess.getServiceMethodReturnTypeAccess().getAlternatives(), "rule__ServiceMethodReturnType__Alternatives");
					put(grammarAccess.getDataTypeReferenceAccess().getAlternatives(), "rule__DataTypeReference__Alternatives");
					put(grammarAccess.getElementTypeReferenceAccess().getAlternatives(), "rule__ElementTypeReference__Alternatives");
					put(grammarAccess.getListTypeAccess().getAlternatives_2(), "rule__ListType__Alternatives_2");
					put(grammarAccess.getMapTypeAccess().getAlternatives_2(), "rule__MapType__Alternatives_2");
					put(grammarAccess.getMapTypeAccess().getAlternatives_4(), "rule__MapType__Alternatives_4");
					put(grammarAccess.getCommentTypeAccess().getAlternatives(), "rule__CommentType__Alternatives");
					put(grammarAccess.getDataTypeEnumAccess().getAlternatives(), "rule__DataTypeEnum__Alternatives");
					put(grammarAccess.getSupportedLangsAccess().getAlternatives(), "rule__SupportedLangs__Alternatives");
					put(grammarAccess.getBabelIdlAccess().getGroup(), "rule__BabelIdl__Group__0");
					put(grammarAccess.getNamespaceAccess().getGroup(), "rule__Namespace__Group__0");
					put(grammarAccess.getDefaultNameSpaceAccess().getGroup(), "rule__DefaultNameSpace__Group__0");
					put(grammarAccess.getDefaultQualifierAccess().getGroup(), "rule__DefaultQualifier__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getImportStatementAccess().getGroup(), "rule__ImportStatement__Group__0");
					put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
					put(grammarAccess.getEnumPropertyAccess().getGroup(), "rule__EnumProperty__Group__0");
					put(grammarAccess.getConstAccess().getGroup(), "rule__Const__Group__0");
					put(grammarAccess.getConstPropertyAccess().getGroup(), "rule__ConstProperty__Group__0");
					put(grammarAccess.getConstNumValueAccess().getGroup(), "rule__ConstNumValue__Group__0");
					put(grammarAccess.getConstNumValueAccess().getGroup_2(), "rule__ConstNumValue__Group_2__0");
					put(grammarAccess.getStructAccess().getGroup(), "rule__Struct__Group__0");
					put(grammarAccess.getStructAccess().getGroup_5(), "rule__Struct__Group_5__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
					put(grammarAccess.getServiceMethodAccess().getGroup(), "rule__ServiceMethod__Group__0");
					put(grammarAccess.getListTypeAccess().getGroup(), "rule__ListType__Group__0");
					put(grammarAccess.getMapTypeAccess().getGroup(), "rule__MapType__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_0(), "rule__Attribute__Group_0__0");
					put(grammarAccess.getBabelIdlAccess().getCommentAssignment_0(), "rule__BabelIdl__CommentAssignment_0");
					put(grammarAccess.getBabelIdlAccess().getImportsAssignment_1(), "rule__BabelIdl__ImportsAssignment_1");
					put(grammarAccess.getBabelIdlAccess().getDefaultNamespaceAssignment_2(), "rule__BabelIdl__DefaultNamespaceAssignment_2");
					put(grammarAccess.getBabelIdlAccess().getNamespacesAssignment_3(), "rule__BabelIdl__NamespacesAssignment_3");
					put(grammarAccess.getBabelIdlAccess().getDefinitionsAssignment_4(), "rule__BabelIdl__DefinitionsAssignment_4");
					put(grammarAccess.getNamespaceAccess().getLangAssignment_1(), "rule__Namespace__LangAssignment_1");
					put(grammarAccess.getNamespaceAccess().getNsAssignment_2(), "rule__Namespace__NsAssignment_2");
					put(grammarAccess.getDefaultNameSpaceAccess().getDefAssignment_1(), "rule__DefaultNameSpace__DefAssignment_1");
					put(grammarAccess.getDefaultNameSpaceAccess().getNsAssignment_2(), "rule__DefaultNameSpace__NsAssignment_2");
					put(grammarAccess.getImportStatementAccess().getImportURIAssignment_1(), "rule__ImportStatement__ImportURIAssignment_1");
					put(grammarAccess.getEnumAccess().getCommentAssignment_0(), "rule__Enum__CommentAssignment_0");
					put(grammarAccess.getEnumAccess().getNameAssignment_2(), "rule__Enum__NameAssignment_2");
					put(grammarAccess.getEnumAccess().getPropertiesAssignment_4(), "rule__Enum__PropertiesAssignment_4");
					put(grammarAccess.getEnumPropertyAccess().getCommentAssignment_0(), "rule__EnumProperty__CommentAssignment_0");
					put(grammarAccess.getEnumPropertyAccess().getNameAssignment_1(), "rule__EnumProperty__NameAssignment_1");
					put(grammarAccess.getEnumPropertyAccess().getTypeAssignment_3(), "rule__EnumProperty__TypeAssignment_3");
					put(grammarAccess.getEnumOrdinalAccess().getTypeAssignment(), "rule__EnumOrdinal__TypeAssignment");
					put(grammarAccess.getEnumPropertyIdAccess().getNameAssignment(), "rule__EnumPropertyId__NameAssignment");
					put(grammarAccess.getConstAccess().getCommentAssignment_0(), "rule__Const__CommentAssignment_0");
					put(grammarAccess.getConstAccess().getNameAssignment_2(), "rule__Const__NameAssignment_2");
					put(grammarAccess.getConstAccess().getPropertiesAssignment_4(), "rule__Const__PropertiesAssignment_4");
					put(grammarAccess.getConstPropertyAccess().getCommentAssignment_0(), "rule__ConstProperty__CommentAssignment_0");
					put(grammarAccess.getConstPropertyAccess().getNameAssignment_1(), "rule__ConstProperty__NameAssignment_1");
					put(grammarAccess.getConstPropertyAccess().getValAssignment_3(), "rule__ConstProperty__ValAssignment_3");
					put(grammarAccess.getConstValueTypeAccess().getStringValAssignment_0(), "rule__ConstValueType__StringValAssignment_0");
					put(grammarAccess.getConstValueTypeAccess().getBoolValAssignment_1(), "rule__ConstValueType__BoolValAssignment_1");
					put(grammarAccess.getConstValueTypeAccess().getNumValAssignment_2(), "rule__ConstValueType__NumValAssignment_2");
					put(grammarAccess.getConstPropertyIdAccess().getNameAssignment(), "rule__ConstPropertyId__NameAssignment");
					put(grammarAccess.getStructAccess().getCommentAssignment_0(), "rule__Struct__CommentAssignment_0");
					put(grammarAccess.getStructAccess().getAttributesAssignment_1(), "rule__Struct__AttributesAssignment_1");
					put(grammarAccess.getStructAccess().getNameAssignment_4(), "rule__Struct__NameAssignment_4");
					put(grammarAccess.getStructAccess().getSuperTypeAssignment_5_1(), "rule__Struct__SuperTypeAssignment_5_1");
					put(grammarAccess.getStructAccess().getPropertiesAssignment_7(), "rule__Struct__PropertiesAssignment_7");
					put(grammarAccess.getPropertyAccess().getCommentAssignment_0(), "rule__Property__CommentAssignment_0");
					put(grammarAccess.getPropertyAccess().getAttributesAssignment_1(), "rule__Property__AttributesAssignment_1");
					put(grammarAccess.getPropertyAccess().getDateTypeAssignment_2_0(), "rule__Property__DateTypeAssignment_2_0");
					put(grammarAccess.getPropertyAccess().getElementTypeAssignment_2_1(), "rule__Property__ElementTypeAssignment_2_1");
					put(grammarAccess.getPropertyAccess().getNameAssignment_3(), "rule__Property__NameAssignment_3");
					put(grammarAccess.getPropertyValueAccess().getNameAssignment(), "rule__PropertyValue__NameAssignment");
					put(grammarAccess.getServiceAccess().getCommentAssignment_0(), "rule__Service__CommentAssignment_0");
					put(grammarAccess.getServiceAccess().getAttributesAssignment_1(), "rule__Service__AttributesAssignment_1");
					put(grammarAccess.getServiceAccess().getNameAssignment_3(), "rule__Service__NameAssignment_3");
					put(grammarAccess.getServiceAccess().getServiceMethodsAssignment_5(), "rule__Service__ServiceMethodsAssignment_5");
					put(grammarAccess.getServiceMethodAccess().getCommentAssignment_0(), "rule__ServiceMethod__CommentAssignment_0");
					put(grammarAccess.getServiceMethodAccess().getAttributesAssignment_1(), "rule__ServiceMethod__AttributesAssignment_1");
					put(grammarAccess.getServiceMethodAccess().getReturnAssignment_2(), "rule__ServiceMethod__ReturnAssignment_2");
					put(grammarAccess.getServiceMethodAccess().getNameAssignment_3(), "rule__ServiceMethod__NameAssignment_3");
					put(grammarAccess.getServiceMethodAccess().getPropertiesAssignment_5(), "rule__ServiceMethod__PropertiesAssignment_5");
					put(grammarAccess.getServicePropertyAccess().getNameAssignment(), "rule__ServiceProperty__NameAssignment");
					put(grammarAccess.getServiceMethodReturnTypeAccess().getVoidTypeAssignment_0(), "rule__ServiceMethodReturnType__VoidTypeAssignment_0");
					put(grammarAccess.getServiceMethodReturnTypeAccess().getDataTypeAssignment_1(), "rule__ServiceMethodReturnType__DataTypeAssignment_1");
					put(grammarAccess.getServiceMethodReturnTypeAccess().getElementTypeAssignment_2(), "rule__ServiceMethodReturnType__ElementTypeAssignment_2");
					put(grammarAccess.getDataTypeReferenceAccess().getTypeAssignment_0(), "rule__DataTypeReference__TypeAssignment_0");
					put(grammarAccess.getListTypeAccess().getDateTypeAssignment_2_0(), "rule__ListType__DateTypeAssignment_2_0");
					put(grammarAccess.getListTypeAccess().getElementTypeAssignment_2_1(), "rule__ListType__ElementTypeAssignment_2_1");
					put(grammarAccess.getMapTypeAccess().getKeyDataTypeAssignment_2_0(), "rule__MapType__KeyDataTypeAssignment_2_0");
					put(grammarAccess.getMapTypeAccess().getKeyElementTypeAssignment_2_1(), "rule__MapType__KeyElementTypeAssignment_2_1");
					put(grammarAccess.getMapTypeAccess().getValDataTypeAssignment_4_0(), "rule__MapType__ValDataTypeAssignment_4_0");
					put(grammarAccess.getMapTypeAccess().getValElementTypeAssignment_4_1(), "rule__MapType__ValElementTypeAssignment_4_1");
					put(grammarAccess.getAttributeAccess().getScopeAssignment_0_1(), "rule__Attribute__ScopeAssignment_0_1");
					put(grammarAccess.getAttributeAccess().getAttrAssignment_1(), "rule__Attribute__AttrAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.concur.babel.ui.contentassist.antlr.internal.InternalBabelIdlParser typedParser = (com.concur.babel.ui.contentassist.antlr.internal.InternalBabelIdlParser) parser;
			typedParser.entryRuleBabelIdl();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BabelIdlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BabelIdlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
